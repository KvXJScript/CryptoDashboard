{"file_contents":{"README.md":{"content":"# CryptoTracker Portfolio Management Application\n\n## Overview\n\nCryptoTracker is a modern full-stack cryptocurrency portfolio management application built with React, Express.js, and PostgreSQL. The application provides simulated cryptocurrency trading capabilities, real-time price tracking through CoinGecko API, portfolio analytics, and watchlist functionality.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom crypto-themed design system\n- **State Management**: TanStack Query (React Query) for server state management\n- **Build Tool**: Vite for development and production builds\n- **Theme System**: Custom dark/light theme provider with CSS variables\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Session Management**: Express sessions with PostgreSQL storage\n- **External APIs**: CoinGecko API for cryptocurrency price data\n\n### Database Architecture\n- **Database**: PostgreSQL with Drizzle ORM\n- **Connection**: Neon serverless PostgreSQL via connection pooling\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Tables**: Users, sessions, holdings, transactions, user balance, and watchlist\n\n## Key Components\n\n### Authentication System\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **User Management**: Automatic user creation and profile management\n- **Authorization**: Middleware-based route protection\n\n### Portfolio Management\n- **Holdings Tracking**: Real-time portfolio value calculation\n- **Transaction History**: Complete audit trail of buy/sell operations\n- **Balance Management**: Virtual cash balance for simulated trading\n- **Performance Analytics**: Portfolio distribution and P&L tracking\n\n### Trading System\n- **Simulated Trading**: Paper trading with virtual currency\n- **Real-time Pricing**: Live price feeds from CoinGecko API\n- **Order Processing**: Buy/sell order execution with fee calculation\n- **Trade Validation**: Balance and holding validation before execution\n\n### Price Data Management\n- **Data Source**: CoinGecko API for cryptocurrency prices\n- **Caching Strategy**: Client-side caching with 30-second refresh intervals\n- **Symbol Mapping**: Internal symbol to CoinGecko ID mapping system\n- **Error Handling**: Graceful degradation when price data is unavailable\n\n### User Interface Components\n- **Dashboard**: Portfolio overview with key metrics and charts\n- **Trading Interface**: Modal-based trading with order preview\n- **Portfolio View**: Detailed holdings breakdown and distribution charts\n- **Watchlist**: Personalized cryptocurrency tracking\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n## Data Flow\n\n### Authentication Flow\n2. OpenID Connect validation and token exchange\n3. User profile creation or update in database\n4. Session establishment with PostgreSQL storage\n5. Protected route access granted\n\n### Trading Flow\n1. User selects cryptocurrency and trade type\n2. Real-time price fetching from CoinGecko\n3. Order validation against available balance/holdings\n4. Transaction record creation with fee calculation\n5. Portfolio holdings and balance updates\n6. Real-time UI refresh with updated data\n\n### Data Synchronization\n1. Client queries trigger server API calls\n2. Server fetches fresh data from database and external APIs\n3. Response caching at client level with TanStack Query\n4. Automatic background refetching for price updates\n5. Optimistic updates for immediate UI feedback\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm**: Type-safe database ORM and query builder\n- **@tanstack/react-query**: Server state management and caching\n- **@radix-ui/***: Accessible UI component primitives\n- **express**: Web application framework\n- **passport**: Authentication middleware\n\n### Development Dependencies\n- **vite**: Build tool and development server\n- **typescript**: Type checking and compilation\n- **tailwindcss**: Utility-first CSS framework\n- **drizzle-kit**: Database schema management\n- **tsx**: TypeScript execution for development\n\n### External Services\n- **CoinGecko API**: Cryptocurrency price data and market information\n- **Neon Database**: Serverless PostgreSQL hosting\n\n## Deployment Strategy\n\n### Development Environment\n- **Runtime**: Node.js 20 with ES modules\n- **Development Server**: Vite dev server with HMR\n- **Database**: Neon PostgreSQL with connection pooling\n- **Environment Variables**: DATABASE_URL, SESSION_SECRET, REPL_ID\n\n### Production Build\n- **Frontend**: Vite production build with asset optimization\n- **Backend**: esbuild compilation to single bundle\n- **Static Assets**: Served from dist/public directory\n- **Process Management**: Single Node.js process with Express\n\n### Replit Deployment\n- **Platform**: Replit autoscale deployment\n- **Port Configuration**: Internal port 5000, external port 80\n- **Build Command**: `npm run build`\n- **Start Command**: `npm run start`\n- **Environment**: Automatic Replit Auth integration\n","size_bytes":5310},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Crypto Dashboard\n\n## Overview\nA full-stack cryptocurrency dashboard application built with React, Express, and TypeScript. Features real-time crypto data, portfolio management, trading simulation, and a comprehensive watchlist system.\n\n## Project Architecture\n\n### Frontend (React + Vite)\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Components**: Shadcn/UI with Radix UI primitives\n- **Styling**: Tailwind CSS with dark mode support\n- **State Management**: TanStack Query for server state\n- **Forms**: React Hook Form with Zod validation\n\n### Backend (Express)\n- **Framework**: Express.js with TypeScript\n- **Runtime**: tsx for development, compiled with esbuild for production\n- **Database**: Drizzle ORM with PostgreSQL (Neon)\n- **Authentication**: Passport.js with local strategy\n- **Session Management**: Express session with PostgreSQL store\n\n### Key Features\n- Real-time cryptocurrency price tracking\n- Portfolio management and analytics\n- Trading simulation with transaction history\n- Watchlist functionality\n- Dark/light theme support\n- Responsive design for mobile and desktop\n\n## Development Setup\n- Server runs on port 5000 (both API and frontend)\n- Uses Vite dev server for hot reloading in development\n- TypeScript configuration with path aliases (@, @assets, @shared)\n\n## Security Practices\n- Client/server separation with API routes\n- Input validation using Zod schemas\n- Secure session management\n- Environment variable configuration for sensitive data\n\n## Recent Changes\n- 2025-08-03: Migrated from Replit Agent to standard Replit environment\n- Fixed dependency installation issues\n- Ensured proper TypeScript compilation setup\n\n## User Preferences\n- None specified yet\n\n## Next Steps\n- Verify all dependencies are properly installed\n- Test application startup and functionality\n- Ensure database connectivity if needed","size_bytes":1889},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.github.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  base: \"/CryptoDashboard/\",\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":654},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    await import(\"@replit/vite-plugin-cartographer\").then((m) => m.cartographer())\n  ],\n  base: \"/CryptoDashboard/\",\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":842},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Only send response if headers haven't been sent\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    \n    // Log the error for debugging\n    console.error(\"Error:\", err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2071},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  // Use memory store due to database connection issues\n  console.warn(\"Using memory store for sessions due to database unavailability\");\n  const MemStore = MemoryStore(session);\n  const sessionStore = new MemStore({\n    checkPeriod: sessionTtl,\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || process.env.REPL_ID || 'fallback-secret-for-development',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const claims = tokens.claims();\n    const user = {\n      sub: claims.sub,\n      email: claims.email,\n      name: claims.name,\n      picture: claims.picture,\n      claims: claims\n    };\n    updateUserSession(user, tokens);\n    await upsertUser(claims);\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    const hostname = req.hostname || req.get('host')?.split(':')[0] || 'localhost';\n    passport.authenticate(`replitauth:${hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    const hostname = req.hostname || req.get('host')?.split(':')[0] || 'localhost';\n    passport.authenticate(`replitauth:${hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4723},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertTransactionSchema, insertWatchlistSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// CoinGecko API service with fallback data\nclass CoinGeckoService {\n  private baseUrl = \"https://api.coingecko.com/api/v3\";\n  private lastRequestTime = 0;\n  private requestDelay = 1000; // 1 second between requests\n  \n  // Fallback data for when API is unavailable\n  private fallbackPrices = {\n    bitcoin: { usd: 106535.00, usd_24h_change: 3.68 },\n    ethereum: { usd: 3245.50, usd_24h_change: -1.24 },\n    cardano: { usd: 0.4567, usd_24h_change: 2.15 },\n    solana: { usd: 89.45, usd_24h_change: -0.87 },\n    polygon: { usd: 0.3456, usd_24h_change: 1.23 },\n    chainlink: { usd: 11.78, usd_24h_change: -2.34 },\n    \"avalanche-2\": { usd: 17.59, usd_24h_change: -2.76 },\n    binancecoin: { usd: 652.67, usd_24h_change: -0.13 },\n    ripple: { usd: 2.34, usd_24h_change: 0.56 },\n    dogecoin: { usd: 0.3789, usd_24h_change: 4.21 },\n    polkadot: { usd: 4.56, usd_24h_change: -1.45 },\n    \"shiba-inu\": { usd: 0.00001234, usd_24h_change: 2.67 },\n    uniswap: { usd: 8.45, usd_24h_change: -0.98 },\n    litecoin: { usd: 67.89, usd_24h_change: 1.87 },\n    cosmos: { usd: 5.67, usd_24h_change: -0.43 },\n    algorand: { usd: 0.1871, usd_24h_change: 3.68 },\n    near: { usd: 3.45, usd_24h_change: -1.23 },\n    vechain: { usd: 0.02345, usd_24h_change: 0.87 },\n    filecoin: { usd: 4.23, usd_24h_change: -2.15 },\n    tron: { usd: 0.2456, usd_24h_change: 1.45 }\n  };\n\n  private async rateLimitedFetch(url: string) {\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n    \n    if (timeSinceLastRequest < this.requestDelay) {\n      await new Promise(resolve => setTimeout(resolve, this.requestDelay - timeSinceLastRequest));\n    }\n    \n    this.lastRequestTime = Date.now();\n    return fetch(url);\n  }\n\n  async getCryptoPrices(symbols: string[] = [\"bitcoin\", \"ethereum\", \"cardano\", \"solana\", \"polygon\", \"chainlink\", \"avalanche-2\", \"binancecoin\", \"ripple\", \"dogecoin\", \"polkadot\", \"shiba-inu\", \"uniswap\", \"litecoin\", \"cosmos\", \"algorand\", \"near\", \"vechain\", \"filecoin\", \"tron\"]) {\n    try {\n      const symbolsString = symbols.join(\",\");\n      const response = await this.rateLimitedFetch(\n        `${this.baseUrl}/simple/price?ids=${symbolsString}&vs_currencies=usd&include_24hr_change=true`\n      );\n      \n      if (!response.ok) {\n        console.log(\"API request failed, using fallback data\");\n        return this.fallbackPrices;\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching crypto prices, using fallback data:\", error);\n      return this.fallbackPrices;\n    }\n  }\n\n  async getCryptoList() {\n    try {\n      const response = await fetch(`${this.baseUrl}/coins/list`);\n      \n      if (!response.ok) {\n        throw new Error(`CoinGecko API error: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching crypto list:\", error);\n      throw error;\n    }\n  }\n\n  async getCryptoDetails(coinId: string) {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/coins/${coinId}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`CoinGecko API error: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching crypto details:\", error);\n      throw error;\n    }\n  }\n\n  async getHistoricalData(coinId: string, days: number = 7) {\n    try {\n      const response = await this.rateLimitedFetch(\n        `${this.baseUrl}/coins/${coinId}/market_chart?vs_currency=usd&days=${days}&interval=${days <= 1 ? 'hourly' : 'daily'}`\n      );\n      \n      if (!response.ok) {\n        console.log(\"Historical data API request failed, using fallback data\");\n        return this.generateFallbackHistoricalData(coinId, days);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching historical data, using fallback data:\", error);\n      return this.generateFallbackHistoricalData(coinId, days);\n    }\n  }\n\n  private generateFallbackHistoricalData(coinId: string, days: number) {\n    const basePrice = this.fallbackPrices[coinId as keyof typeof this.fallbackPrices]?.usd || 100;\n    const prices: number[][] = [];\n    const volumes: number[][] = [];\n    \n    for (let i = days; i >= 0; i--) {\n      const timestamp = Date.now() - (i * 24 * 60 * 60 * 1000);\n      const priceVariation = (Math.random() - 0.5) * 0.1; // ±5% variation\n      const price = basePrice * (1 + priceVariation);\n      const volume = Math.random() * 1000000000; // Random volume\n      \n      prices.push([timestamp, price]);\n      volumes.push([timestamp, volume]);\n    }\n    \n    return { prices, total_volumes: volumes };\n  }\n}\n\nconst coinGecko = new CoinGeckoService();\n\n// Symbol mapping for CoinGecko IDs\nconst symbolToCoinGeckoId: Record<string, string> = {\n  \"BTC\": \"bitcoin\",\n  \"ETH\": \"ethereum\", \n  \"ADA\": \"cardano\",\n  \"SOL\": \"solana\",\n  \"MATIC\": \"polygon\",\n  \"LINK\": \"chainlink\",\n  \"AVAX\": \"avalanche-2\",\n  \"BNB\": \"binancecoin\",\n  \"XRP\": \"ripple\",\n  \"DOGE\": \"dogecoin\",\n  \"DOT\": \"polkadot\",\n  \"SHIB\": \"shiba-inu\",\n  \"UNI\": \"uniswap\",\n  \"LTC\": \"litecoin\",\n  \"ATOM\": \"cosmos\",\n  \"ALGO\": \"algorand\",\n  \"NEAR\": \"near\",\n  \"VET\": \"vechain\",\n  \"FIL\": \"filecoin\",\n  \"TRX\": \"tron\"\n};\n\nconst coinGeckoIdToSymbol: Record<string, string> = {\n  \"bitcoin\": \"BTC\",\n  \"ethereum\": \"ETH\",\n  \"cardano\": \"ADA\", \n  \"solana\": \"SOL\",\n  \"polygon\": \"MATIC\",\n  \"chainlink\": \"LINK\",\n  \"avalanche-2\": \"AVAX\",\n  \"binancecoin\": \"BNB\",\n  \"ripple\": \"XRP\",\n  \"dogecoin\": \"DOGE\",\n  \"polkadot\": \"DOT\",\n  \"shiba-inu\": \"SHIB\",\n  \"uniswap\": \"UNI\",\n  \"litecoin\": \"LTC\",\n  \"cosmos\": \"ATOM\",\n  \"algorand\": \"ALGO\",\n  \"near\": \"NEAR\",\n  \"vechain\": \"VET\",\n  \"filecoin\": \"FIL\",\n  \"tron\": \"TRX\"\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // Handle authentication for both database and memory storage\n      \n      // Handle both database and memory storage authentication\n      let userId;\n      if (req.user.claims && req.user.claims.sub) {\n        userId = req.user.claims.sub;\n      } else if (req.user.sub) {\n        userId = req.user.sub;\n      } else if (req.user.id) {\n        userId = req.user.id;\n      } else {\n        // For memory storage, create a default user ID\n        userId = 'default-user';\n      }\n      \n      let user = await storage.getUser(userId);\n      if (!user) {\n        // Create user if doesn't exist (for memory storage)\n        const userData = {\n          id: userId,\n          email: req.user.email || 'user@example.com',\n          name: req.user.name || 'Demo User',\n          avatarUrl: req.user.picture || null,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        user = await storage.upsertUser(userData);\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Crypto prices endpoint\n  app.get('/api/crypto/prices', async (req, res) => {\n    try {\n      const prices = await coinGecko.getCryptoPrices();\n      \n      // Transform to our format\n      const formattedPrices = Object.entries(prices).map(([coinId, data]: [string, any]) => ({\n        symbol: coinGeckoIdToSymbol[coinId] || coinId.toUpperCase(),\n        name: coinId.charAt(0).toUpperCase() + coinId.slice(1),\n        price: data.usd,\n        change24h: data.usd_24h_change || 0,\n        coinGeckoId: coinId\n      }));\n\n      res.json(formattedPrices);\n    } catch (error) {\n      console.error(\"Error fetching crypto prices:\", error);\n      res.status(500).json({ message: \"Failed to fetch crypto prices\" });\n    }\n  });\n\n  // Portfolio endpoints\n  app.get('/api/portfolio', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const holdings = await storage.getUserHoldings(userId);\n      let balance = await storage.getUserBalance(userId);\n      \n      // Initialize balance if it doesn't exist\n      if (!balance) {\n        balance = await storage.initializeUserBalance(userId);\n      }\n      \n      // Get current prices for portfolio calculation\n      const symbols = holdings.map(h => symbolToCoinGeckoId[h.symbol]).filter(Boolean);\n      let prices: Record<string, any> = {};\n      \n      if (symbols.length > 0) {\n        prices = await coinGecko.getCryptoPrices(symbols);\n      }\n\n      // Calculate portfolio value\n      let totalValue = parseFloat(balance?.balance || \"0\");\n      const holdingsWithValue = holdings.map(holding => {\n        const coinGeckoId = symbolToCoinGeckoId[holding.symbol];\n        const price = prices[coinGeckoId]?.usd || 0;\n        const value = parseFloat(holding.amount) * price;\n        totalValue += value;\n        \n        return {\n          ...holding,\n          currentPrice: price,\n          value,\n          change24h: prices[coinGeckoId]?.usd_24h_change || 0\n        };\n      });\n\n      res.json({\n        totalValue,\n        availableCash: parseFloat(balance?.balance || \"0\"),\n        holdings: holdingsWithValue\n      });\n    } catch (error) {\n      console.error(\"Error fetching portfolio:\", error);\n      res.status(500).json({ message: \"Failed to fetch portfolio\" });\n    }\n  });\n\n  // Trade endpoint (buy/sell)\n  app.post('/api/trade', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { symbol, type, amount, price } = req.body;\n\n      if (!symbol || !type || !amount || !price) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      if (type !== \"buy\" && type !== \"sell\") {\n        return res.status(400).json({ message: \"Invalid trade type\" });\n      }\n\n      const amountNum = parseFloat(amount);\n      const priceNum = parseFloat(price);\n      const total = amountNum * priceNum;\n      const fee = total * 0.001; // 0.1% fee\n      const totalWithFee = type === \"buy\" ? total + fee : total - fee;\n\n      // Get user balance and initialize if needed\n      let balance = await storage.getUserBalance(userId);\n      if (!balance) {\n        balance = await storage.initializeUserBalance(userId);\n      }\n\n      const currentBalance = parseFloat(balance.balance || \"0\");\n\n      if (type === \"buy\") {\n        // Check if user has enough balance\n        if (currentBalance < total + fee) {\n          return res.status(400).json({ message: \"Insufficient balance\" });\n        }\n\n        // Update balance\n        await storage.updateUserBalance(userId, (currentBalance - total - fee).toString());\n\n        // Update or create holding\n        const existingHolding = await storage.getHolding(userId, symbol);\n        if (existingHolding) {\n          const newAmount = parseFloat(existingHolding.amount) + amountNum;\n          await storage.updateHolding(userId, symbol, newAmount.toString());\n        } else {\n          await storage.createHolding({\n            userId,\n            symbol,\n            amount: amount.toString()\n          });\n        }\n      } else {\n        // Sell\n        const existingHolding = await storage.getHolding(userId, symbol);\n        if (!existingHolding || parseFloat(existingHolding.amount) < amountNum) {\n          return res.status(400).json({ message: \"Insufficient holdings\" });\n        }\n\n        // Update balance\n        await storage.updateUserBalance(userId, (currentBalance + total - fee).toString());\n\n        // Update holding\n        const newAmount = parseFloat(existingHolding.amount) - amountNum;\n        if (newAmount > 0) {\n          await storage.updateHolding(userId, symbol, newAmount.toString());\n        } else {\n          // Remove holding if amount becomes 0 or negative\n          await storage.updateHolding(userId, symbol, \"0\");\n        }\n      }\n\n      // Create transaction record\n      const transaction = await storage.createTransaction({\n        userId,\n        symbol,\n        type,\n        amount: amount.toString(),\n        price: price.toString(),\n        total: total.toString(),\n        fee: fee.toString()\n      });\n\n      res.json({ success: true, transaction });\n    } catch (error) {\n      console.error(\"Error processing trade:\", error);\n      res.status(500).json({ message: \"Failed to process trade\" });\n    }\n  });\n\n  // Transactions endpoint\n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const transactions = await storage.getUserTransactions(userId, limit);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Watchlist endpoints\n  app.get('/api/watchlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const watchlistItems = await storage.getUserWatchlist(userId);\n      \n      // Get prices for watchlist items\n      const symbols = watchlistItems.map(item => symbolToCoinGeckoId[item.symbol]).filter(Boolean);\n      let prices: Record<string, any> = {};\n      \n      if (symbols.length > 0) {\n        prices = await coinGecko.getCryptoPrices(symbols);\n      }\n\n      const watchlistWithPrices = watchlistItems.map(item => {\n        const coinGeckoId = symbolToCoinGeckoId[item.symbol];\n        return {\n          ...item,\n          price: prices[coinGeckoId]?.usd || 0,\n          change24h: prices[coinGeckoId]?.usd_24h_change || 0\n        };\n      });\n\n      res.json(watchlistWithPrices);\n    } catch (error) {\n      console.error(\"Error fetching watchlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch watchlist\" });\n    }\n  });\n\n  app.post('/api/watchlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { symbol } = req.body;\n\n      if (!symbol) {\n        return res.status(400).json({ message: \"Symbol is required\" });\n      }\n\n      const item = await storage.addToWatchlist({ userId, symbol });\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error adding to watchlist:\", error);\n      res.status(500).json({ message: \"Failed to add to watchlist\" });\n    }\n  });\n\n  app.delete('/api/watchlist/:symbol', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { symbol } = req.params;\n\n      await storage.removeFromWatchlist(userId, symbol);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing from watchlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from watchlist\" });\n    }\n  });\n\n  // Crypto details endpoint for icons and additional data\n  app.get('/api/crypto/:coinId/details', async (req, res) => {\n    try {\n      const { coinId } = req.params;\n      const details = await coinGecko.getCryptoDetails(coinId);\n      \n      res.json({\n        id: details.id,\n        symbol: details.symbol.toUpperCase(),\n        name: details.name,\n        image: details.image?.large || details.image?.small,\n        current_price: details.market_data?.current_price?.usd,\n        price_change_24h: details.market_data?.price_change_percentage_24h,\n        market_cap: details.market_data?.market_cap?.usd,\n        market_cap_rank: details.market_cap_rank,\n        total_volume: details.market_data?.total_volume?.usd,\n        description: details.description?.en?.substring(0, 500)\n      });\n    } catch (error) {\n      console.error(\"Error fetching crypto details:\", error);\n      res.status(500).json({ message: \"Failed to fetch crypto details\" });\n    }\n  });\n\n  // Historical data endpoint for charts\n  app.get('/api/crypto/:coinId/history', async (req, res) => {\n    try {\n      const { coinId } = req.params;\n      const days = parseInt(req.query.days as string) || 7;\n      const data = await coinGecko.getHistoricalData(coinId, days);\n      \n      // Transform the data for easier frontend consumption\n      const chartData = data.prices.map((price: [number, number], index: number) => ({\n        timestamp: price[0],\n        price: price[1],\n        volume: data.total_volumes[index]?.[1] || 0\n      }));\n      \n      res.json(chartData);\n    } catch (error) {\n      console.error(\"Error fetching historical data:\", error);\n      res.status(500).json({ message: \"Failed to fetch historical data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17031},"server/storage.ts":{"content":"import {\n  users,\n  holdings,\n  transactions,\n  watchlist,\n  userBalance,\n  type User,\n  type UpsertUser,\n  type Holding,\n  type InsertHolding,\n  type Transaction,\n  type InsertTransaction,\n  type WatchlistItem,\n  type InsertWatchlist,\n  type UserBalance,\n  type InsertUserBalance,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Portfolio operations\n  getUserHoldings(userId: string): Promise<Holding[]>;\n  getHolding(userId: string, symbol: string): Promise<Holding | undefined>;\n  createHolding(holding: InsertHolding): Promise<Holding>;\n  updateHolding(userId: string, symbol: string, amount: string): Promise<Holding>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getUserTransactions(userId: string, limit?: number): Promise<Transaction[]>;\n  \n  // Watchlist operations\n  getUserWatchlist(userId: string): Promise<WatchlistItem[]>;\n  addToWatchlist(item: InsertWatchlist): Promise<WatchlistItem>;\n  removeFromWatchlist(userId: string, symbol: string): Promise<void>;\n  \n  // Balance operations\n  getUserBalance(userId: string): Promise<UserBalance | undefined>;\n  updateUserBalance(userId: string, balance: string): Promise<UserBalance>;\n  initializeUserBalance(userId: string): Promise<UserBalance>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Initialize user balance if this is a new user\n    await this.initializeUserBalance(user.id);\n    \n    return user;\n  }\n\n  // Portfolio operations\n  async getUserHoldings(userId: string): Promise<Holding[]> {\n    return await db\n      .select()\n      .from(holdings)\n      .where(eq(holdings.userId, userId));\n  }\n\n  async getHolding(userId: string, symbol: string): Promise<Holding | undefined> {\n    const [holding] = await db\n      .select()\n      .from(holdings)\n      .where(and(eq(holdings.userId, userId), eq(holdings.symbol, symbol)));\n    return holding;\n  }\n\n  async createHolding(holding: InsertHolding): Promise<Holding> {\n    const [newHolding] = await db\n      .insert(holdings)\n      .values(holding)\n      .returning();\n    return newHolding;\n  }\n\n  async updateHolding(userId: string, symbol: string, amount: string): Promise<Holding> {\n    const [updatedHolding] = await db\n      .update(holdings)\n      .set({ amount, updatedAt: new Date() })\n      .where(and(eq(holdings.userId, userId), eq(holdings.symbol, symbol)))\n      .returning();\n    return updatedHolding;\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db\n      .insert(transactions)\n      .values(transaction)\n      .returning();\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string, limit: number = 10): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n  }\n\n  // Watchlist operations\n  async getUserWatchlist(userId: string): Promise<WatchlistItem[]> {\n    return await db\n      .select()\n      .from(watchlist)\n      .where(eq(watchlist.userId, userId));\n  }\n\n  async addToWatchlist(item: InsertWatchlist): Promise<WatchlistItem> {\n    const [newItem] = await db\n      .insert(watchlist)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async removeFromWatchlist(userId: string, symbol: string): Promise<void> {\n    await db\n      .delete(watchlist)\n      .where(and(eq(watchlist.userId, userId), eq(watchlist.symbol, symbol)));\n  }\n\n  // Balance operations\n  async getUserBalance(userId: string): Promise<UserBalance | undefined> {\n    const [balance] = await db\n      .select()\n      .from(userBalance)\n      .where(eq(userBalance.userId, userId));\n    return balance;\n  }\n\n  async updateUserBalance(userId: string, balance: string): Promise<UserBalance> {\n    const [updatedBalance] = await db\n      .update(userBalance)\n      .set({ balance, updatedAt: new Date() })\n      .where(eq(userBalance.userId, userId))\n      .returning();\n    return updatedBalance;\n  }\n\n  async initializeUserBalance(userId: string): Promise<UserBalance> {\n    try {\n      const [newBalance] = await db\n        .insert(userBalance)\n        .values({ userId, balance: \"10000.00\" })\n        .returning();\n      return newBalance;\n    } catch (error) {\n      // If balance already exists, return it\n      const existing = await this.getUserBalance(userId);\n      if (existing) return existing;\n      throw error;\n    }\n  }\n}\n\n// Memory storage implementation as fallback\nclass MemoryStorage implements IStorage {\n  private users = new Map<string, User>();\n  private holdings = new Map<string, Holding[]>();\n  private transactions = new Map<string, Transaction[]>();\n  private watchlists = new Map<string, WatchlistItem[]>();\n  private balances = new Map<string, UserBalance>();\n  private nextId = 1;\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = Array.from(this.users.values()).find(u => u.email === userData.email);\n    if (existingUser) {\n      const updated = { ...existingUser, ...userData };\n      this.users.set(existingUser.id.toString(), updated);\n      return updated;\n    }\n    \n    const newUser: User = {\n      id: (this.nextId++).toString(),\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(newUser.id.toString(), newUser);\n    return newUser;\n  }\n\n  async getUserHoldings(userId: string): Promise<Holding[]> {\n    return this.holdings.get(userId) || [];\n  }\n\n  async getHolding(userId: string, symbol: string): Promise<Holding | undefined> {\n    const userHoldings = this.holdings.get(userId) || [];\n    return userHoldings.find(h => h.symbol === symbol);\n  }\n\n  async createHolding(holding: InsertHolding): Promise<Holding> {\n    const newHolding: Holding = {\n      id: this.nextId++,\n      ...holding,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const userHoldings = this.holdings.get(holding.userId) || [];\n    userHoldings.push(newHolding);\n    this.holdings.set(holding.userId, userHoldings);\n    return newHolding;\n  }\n\n  async updateHolding(userId: string, symbol: string, amount: string): Promise<Holding> {\n    const userHoldings = this.holdings.get(userId) || [];\n    const holdingIndex = userHoldings.findIndex(h => h.symbol === symbol);\n    \n    if (holdingIndex >= 0) {\n      userHoldings[holdingIndex] = {\n        ...userHoldings[holdingIndex],\n        amount,\n        updatedAt: new Date(),\n      };\n      return userHoldings[holdingIndex];\n    }\n    \n    throw new Error('Holding not found');\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const newTransaction: Transaction = {\n      id: this.nextId++,\n      ...transaction,\n      fee: transaction.fee || null,\n      createdAt: new Date(),\n    };\n    \n    const userTransactions = this.transactions.get(transaction.userId) || [];\n    userTransactions.unshift(newTransaction);\n    this.transactions.set(transaction.userId, userTransactions);\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string, limit: number = 10): Promise<Transaction[]> {\n    const userTransactions = this.transactions.get(userId) || [];\n    return userTransactions.slice(0, limit);\n  }\n\n  async getUserWatchlist(userId: string): Promise<WatchlistItem[]> {\n    return this.watchlists.get(userId) || [];\n  }\n\n  async addToWatchlist(item: InsertWatchlist): Promise<WatchlistItem> {\n    const newItem: WatchlistItem = {\n      id: this.nextId++,\n      ...item,\n      createdAt: new Date(),\n    };\n    \n    const userWatchlist = this.watchlists.get(item.userId) || [];\n    userWatchlist.push(newItem);\n    this.watchlists.set(item.userId, userWatchlist);\n    return newItem;\n  }\n\n  async removeFromWatchlist(userId: string, symbol: string): Promise<void> {\n    const userWatchlist = this.watchlists.get(userId) || [];\n    const filtered = userWatchlist.filter(item => item.symbol !== symbol);\n    this.watchlists.set(userId, filtered);\n  }\n\n  async getUserBalance(userId: string): Promise<UserBalance | undefined> {\n    return this.balances.get(userId);\n  }\n\n  async updateUserBalance(userId: string, balance: string): Promise<UserBalance> {\n    const existing = this.balances.get(userId);\n    if (!existing) {\n      throw new Error('Balance not found');\n    }\n    \n    const updated: UserBalance = {\n      ...existing,\n      balance,\n      updatedAt: new Date(),\n    };\n    this.balances.set(userId, updated);\n    return updated;\n  }\n\n  async initializeUserBalance(userId: string): Promise<UserBalance> {\n    const newBalance: UserBalance = {\n      id: this.nextId++,\n      userId,\n      balance: \"10000.00\",\n      updatedAt: new Date(),\n    };\n    this.balances.set(userId, newBalance);\n    return newBalance;\n  }\n}\n\n// Export storage with memory fallback due to database issues\nconsole.warn(\"Using memory storage due to database connection issues\");\nexport const storage = new MemoryStorage();\n","size_bytes":10038},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  decimal,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Portfolio holdings table\nexport const holdings = pgTable(\"holdings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  symbol: varchar(\"symbol\").notNull(), // BTC, ETH, etc.\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  symbol: varchar(\"symbol\").notNull(),\n  type: varchar(\"type\").notNull(), // 'buy' or 'sell'\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  price: decimal(\"price\", { precision: 18, scale: 8 }).notNull(),\n  total: decimal(\"total\", { precision: 18, scale: 8 }).notNull(),\n  fee: decimal(\"fee\", { precision: 18, scale: 8 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Watchlist table\nexport const watchlist = pgTable(\"watchlist\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  symbol: varchar(\"symbol\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User cash balance table\nexport const userBalance = pgTable(\"user_balance\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  balance: decimal(\"balance\", { precision: 18, scale: 2 }).default(\"10000.00\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  holdings: many(holdings),\n  transactions: many(transactions),\n  watchlist: many(watchlist),\n  balance: one(userBalance),\n}));\n\nexport const holdingsRelations = relations(holdings, ({ one }) => ({\n  user: one(users, {\n    fields: [holdings.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const watchlistRelations = relations(watchlist, ({ one }) => ({\n  user: one(users, {\n    fields: [watchlist.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userBalanceRelations = relations(userBalance, ({ one }) => ({\n  user: one(users, {\n    fields: [userBalance.userId],\n    references: [users.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertHolding = typeof holdings.$inferInsert;\nexport type Holding = typeof holdings.$inferSelect;\n\nexport type InsertTransaction = typeof transactions.$inferInsert;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type InsertWatchlist = typeof watchlist.$inferInsert;\nexport type WatchlistItem = typeof watchlist.$inferSelect;\n\nexport type InsertUserBalance = typeof userBalance.$inferInsert;\nexport type UserBalance = typeof userBalance.$inferSelect;\n\n// Insert schemas\nexport const insertHoldingSchema = createInsertSchema(holdings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWatchlistSchema = createInsertSchema(watchlist).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserBalanceSchema = createInsertSchema(userBalance).omit({\n  id: true,\n  updatedAt: true,\n});\n","size_bytes":4577},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Portfolio from \"@/pages/Portfolio\";\nimport Trade from \"@/pages/Trade\";\nimport WatchlistPage from \"@/pages/WatchlistPage\";\nimport FAQ from \"@/pages/FAQ\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user, error } = useAuth();\n\n  // Authentication logic handles routing\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/portfolio\" component={Portfolio} />\n          <Route path=\"/trade\" component={Trade} />\n          <Route path=\"/watchlist\" component={WatchlistPage} />\n          <Route path=\"/faq\" component={FAQ} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1793},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15%);\n  --input: hsl(240, 3.7%, 15%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.75rem;\n  \n  /* Crypto-specific colors */\n  --crypto-dark: hsl(240, 10%, 3.9%);\n  --crypto-card-dark: hsl(240, 8%, 8%);\n  --crypto-success: hsl(142, 76%, 55%);\n  --crypto-danger: hsl(346, 87%, 65%);\n  --crypto-primary: hsl(217, 91%, 65%);\n  --crypto-warning: hsl(38, 92%, 55%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 18%);\n  --muted-foreground: hsl(240, 5%, 75%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 20%);\n  --input: hsl(240, 3.7%, 18%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 18%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 18%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.75rem;\n  \n  /* Crypto-specific colors for dark mode */\n  --crypto-dark: hsl(240, 10%, 3.9%);\n  --crypto-card-dark: hsl(240, 8%, 8%);\n  --crypto-success: hsl(142, 76%, 55%);\n  --crypto-danger: hsl(346, 87%, 65%);\n  --crypto-primary: hsl(217, 91%, 65%);\n  --crypto-warning: hsl(38, 92%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .crypto-dark {\n    background-color: var(--crypto-dark);\n  }\n  \n  .crypto-card-dark {\n    background-color: var(--crypto-card-dark);\n  }\n  \n  .crypto-success {\n    color: var(--crypto-success);\n  }\n  \n  .crypto-danger {\n    color: var(--crypto-danger);\n  }\n  \n  .crypto-primary {\n    color: var(--crypto-primary);\n  }\n  \n  .crypto-warning {\n    color: var(--crypto-warning);\n  }\n\n  /* Modern glass morphism effects */\n  .glass-card {\n    backdrop-filter: blur(20px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n\n  .dark .glass-card {\n    background: rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Gradient animations */\n  .gradient-animation {\n    background: linear-gradient(-45deg, var(--crypto-primary), var(--crypto-success), var(--crypto-warning), var(--crypto-danger));\n    background-size: 400% 400%;\n    animation: gradientShift 4s ease infinite;\n  }\n\n  @keyframes gradientShift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  /* Floating animation */\n  .float-animation {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n    100% { transform: translateY(0px); }\n  }\n\n  /* Modern hover effects */\n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  /* Background utilities */\n  .bg-crypto-success {\n    background-color: var(--crypto-success);\n  }\n  \n  .bg-crypto-danger {\n    background-color: var(--crypto-danger);\n  }\n  \n  .bg-crypto-primary {\n    background-color: var(--crypto-primary);\n  }\n  \n  .bg-crypto-warning {\n    background-color: var(--crypto-warning);\n  }\n  \n  .border-crypto-success {\n    border-color: var(--crypto-success);\n  }\n  \n  .border-crypto-danger {\n    border-color: var(--crypto-danger);\n  }\n  \n  .border-crypto-primary {\n    border-color: var(--crypto-primary);\n  }\n  \n  .border-crypto-warning {\n    border-color: var(--crypto-warning);\n  }\n\n  /* Modern Motion Animations */\n  .animate-fade-in {\n    animation: fadeIn 1s ease-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n\n  .animate-slide-in-left {\n    animation: slideInLeft 0.8s ease-out;\n  }\n\n  .animate-slide-in-right {\n    animation: slideInRight 0.8s ease-out;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.6s ease-out;\n  }\n\n  .animate-pulse-glow {\n    animation: pulseGlow 2s ease-in-out infinite;\n  }\n\n  .animate-bounce-subtle {\n    animation: bounceSubtle 2s ease-in-out infinite;\n  }\n\n  .animate-gradient-flow {\n    background-size: 400% 400%;\n    animation: gradientFlow 4s ease infinite;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(40px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  @keyframes slideInLeft {\n    from { opacity: 0; transform: translateX(-40px); }\n    to { opacity: 1; transform: translateX(0); }\n  }\n\n  @keyframes slideInRight {\n    from { opacity: 0; transform: translateX(40px); }\n    to { opacity: 1; transform: translateX(0); }\n  }\n\n  @keyframes scaleIn {\n    from { opacity: 0; transform: scale(0.8); }\n    to { opacity: 1; transform: scale(1); }\n  }\n\n  @keyframes pulseGlow {\n    0%, 100% { box-shadow: 0 0 20px rgba(138, 43, 226, 0.3); }\n    50% { box-shadow: 0 0 40px rgba(138, 43, 226, 0.6); }\n  }\n\n  @keyframes bounceSubtle {\n    0%, 100% { transform: translateY(0); }\n    50% { transform: translateY(-10px); }\n  }\n\n  @keyframes gradientFlow {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  /* Modern Glass Effect */\n  .glass-modern {\n    backdrop-filter: blur(20px);\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Staggered Animation Delays */\n  .animate-delay-100 { animation-delay: 0.1s; }\n  .animate-delay-200 { animation-delay: 0.2s; }\n  .animate-delay-300 { animation-delay: 0.3s; }\n  .animate-delay-400 { animation-delay: 0.4s; }\n  .animate-delay-500 { animation-delay: 0.5s; }\n  .animate-delay-600 { animation-delay: 0.6s; }\n}","size_bytes":6833},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CryptoIcon.tsx":{"content":"interface CryptoIconProps {\n  coinId: string;\n  symbol: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport default function CryptoIcon({ symbol, size = \"md\", className = \"\" }: CryptoIconProps) {\n  const sizeClasses = {\n    sm: \"w-6 h-6\",\n    md: \"w-8 h-8\", \n    lg: \"w-12 h-12\"\n  };\n\n  const textSizes = {\n    sm: \"text-xs\",\n    md: \"text-sm\",\n    lg: \"text-base\"\n  };\n\n  // Use multiple reliable crypto icon sources\n  const getIconUrl = (symbol: string) => {\n    // Primary: CryptoCompare API (more reliable)\n    const cryptoCompareUrl = `https://www.cryptocompare.com/media/37746251/btc.png`.replace('btc', symbol.toLowerCase());\n    \n    // Alternative sources\n    const alternativeUrls: Record<string, string> = {\n      BTC: \"https://assets.coincap.io/assets/icons/btc@2x.png\",\n      ETH: \"https://assets.coincap.io/assets/icons/eth@2x.png\",\n      ADA: \"https://assets.coincap.io/assets/icons/ada@2x.png\",\n      SOL: \"https://assets.coincap.io/assets/icons/sol@2x.png\",\n      MATIC: \"https://assets.coincap.io/assets/icons/matic@2x.png\",\n      LINK: \"https://assets.coincap.io/assets/icons/link@2x.png\",\n      AVAX: \"https://assets.coincap.io/assets/icons/avax@2x.png\",\n      BNB: \"https://assets.coincap.io/assets/icons/bnb@2x.png\",\n      XRP: \"https://assets.coincap.io/assets/icons/xrp@2x.png\",\n      DOGE: \"https://assets.coincap.io/assets/icons/doge@2x.png\",\n      DOT: \"https://assets.coincap.io/assets/icons/dot@2x.png\",\n      SHIB: \"https://assets.coincap.io/assets/icons/shib@2x.png\",\n      UNI: \"https://assets.coincap.io/assets/icons/uni@2x.png\",\n      LTC: \"https://assets.coincap.io/assets/icons/ltc@2x.png\",\n      ATOM: \"https://assets.coincap.io/assets/icons/atom@2x.png\",\n      ALGO: \"https://assets.coincap.io/assets/icons/algo@2x.png\",\n      NEAR: \"https://assets.coincap.io/assets/icons/near@2x.png\",\n      VET: \"https://assets.coincap.io/assets/icons/vet@2x.png\",\n      FIL: \"https://assets.coincap.io/assets/icons/fil@2x.png\",\n      TRX: \"https://assets.coincap.io/assets/icons/trx@2x.png\"\n    };\n    \n    return alternativeUrls[symbol] || null;\n  };\n\n  const FallbackIcon = () => (\n    <div className={`${sizeClasses[size]} ${className} bg-gradient-to-br from-crypto-primary/20 to-crypto-primary/40 rounded-full flex items-center justify-center border border-crypto-primary/30`}>\n      <span className={`${textSizes[size]} font-bold text-crypto-primary`}>\n        {symbol.slice(0, 2)}\n      </span>\n    </div>\n  );\n\n  const iconUrl = getIconUrl(symbol);\n\n  if (!iconUrl) {\n    return <FallbackIcon />;\n  }\n\n  return (\n    <div className=\"relative\">\n      <img\n        src={iconUrl}\n        alt={`${symbol} icon`}\n        className={`${sizeClasses[size]} ${className} rounded-full`}\n        onError={(e) => {\n          const target = e.target as HTMLImageElement;\n          const parent = target.parentElement;\n          if (parent) {\n            parent.innerHTML = `\n              <div class=\"${sizeClasses[size]} ${className} bg-gradient-to-br from-crypto-primary/20 to-crypto-primary/40 rounded-full flex items-center justify-center border border-crypto-primary/30\">\n                <span class=\"${textSizes[size]} font-bold text-crypto-primary\">\n                  ${symbol.slice(0, 2)}\n                </span>\n              </div>\n            `;\n          }\n        }}\n        loading=\"lazy\"\n      />\n    </div>\n  );\n}","size_bytes":3365},"client/src/components/CryptoList.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { ArrowUp, ArrowDown } from \"lucide-react\";\nimport { useCryptoPrices, type CryptoPrice } from \"@/hooks/useCryptoPrices\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\n\ninterface CryptoListProps {\n  onTrade: (crypto: CryptoPrice, type: \"buy\" | \"sell\") => void;\n}\n\nexport default function CryptoList({ onTrade }: CryptoListProps) {\n  const { data: cryptos, isLoading } = useCryptoPrices();\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: price < 1 ? 6 : 2,\n    }).format(price);\n  };\n\n  const formatPercent = (change: number) => {\n    return `${change >= 0 ? \"+\" : \"\"}${change.toFixed(2)}%`;\n  };\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return \"text-green-400\";\n    if (change < 0) return \"text-red-400\";\n    return \"text-gray-400\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-lg font-semibold\">Live Prices</h2>\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 rounded-xl animate-pulse\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-16 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-8\"></div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-20 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-12\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const topCryptos = cryptos?.slice(0, 6) || [];\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold\">Live Prices</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {topCryptos.map((crypto, index) => (\n            <motion.div\n              key={crypto.symbol}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"flex items-center justify-between p-4 rounded-xl border hover:bg-muted/50 transition-colors\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <CryptoIcon symbol={crypto.symbol} size={40} />\n                <div>\n                  <h3 className=\"font-medium\">{crypto.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{crypto.symbol}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-medium\">{formatPrice(crypto.price)}</p>\n                <p className={`text-sm ${getChangeColor(crypto.change24h)}`}>\n                  {crypto.change24h >= 0 ? <ArrowUp className=\"inline w-3 h-3 mr-1\" /> : <ArrowDown className=\"inline w-3 h-3 mr-1\" />}\n                  {formatPercent(crypto.change24h)}\n                </p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => onTrade(crypto, \"buy\")}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  Buy\n                </Button>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4091},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Wallet, TrendingUp, DollarSign, ArrowUp, ArrowDown } from \"lucide-react\";\nimport { usePortfolio, useUserBalance } from \"@/hooks/usePortfolio\";\nimport { useCryptoPrices } from \"@/hooks/useCryptoPrices\";\n\nexport default function DashboardStats() {\n  const { data: holdings, isLoading: holdingsLoading } = usePortfolio();\n  const { data: userBalance } = useUserBalance();\n  const { data: cryptoPrices } = useCryptoPrices();\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  };\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return \"text-green-400\";\n    if (change < 0) return \"text-red-400\";\n    return \"text-gray-400\";\n  };\n\n  if (holdingsLoading) {\n    return (\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate portfolio metrics\n  const portfolioData = holdings ? holdings.map(holding => {\n    const cryptoPrice = cryptoPrices?.find(p => p.symbol === holding.symbol);\n    const currentPrice = cryptoPrice?.price || 0;\n    const amount = parseFloat(holding.amount);\n    const value = amount * currentPrice;\n    \n    return {\n      value,\n      change24h: cryptoPrice?.change24h || 0,\n    };\n  }) : [];\n\n  const totalValue = portfolioData.reduce((sum, item) => sum + item.value, 0);\n  const availableCash = userBalance ? parseFloat(userBalance.balance) : 0;\n  const todayPnL = portfolioData.reduce((total, item) => {\n    const changeValue = (item.value * item.change24h) / 100;\n    return total + changeValue;\n  }, 0);\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"border-0 shadow-lg bg-gradient-to-br from-primary/5 via-background to-background\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Portfolio</p>\n                <p className=\"text-2xl font-bold\">{formatCurrency(totalValue)}</p>\n                <p className={`text-sm ${getChangeColor(todayPnL)}`}>\n                  {todayPnL >= 0 ? <ArrowUp className=\"inline w-3 h-3 mr-1\" /> : <ArrowDown className=\"inline w-3 h-3 mr-1\" />}\n                  {formatCurrency(Math.abs(todayPnL))} today\n                </p>\n              </div>\n              <div className=\"h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                <Wallet className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Available Cash</p>\n                <p className=\"text-2xl font-bold\">{formatCurrency(availableCash)}</p>\n                <p className=\"text-sm text-muted-foreground\">Ready to invest</p>\n              </div>\n              <div className=\"h-12 w-12 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Assets</p>\n                <p className=\"text-2xl font-bold\">{formatCurrency(totalValue + availableCash)}</p>\n                <p className=\"text-sm text-muted-foreground\">All holdings + cash</p>\n              </div>\n              <div className=\"h-12 w-12 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4807},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Moon, Sun, ChartLine, Menu, ChevronDown } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Header() {\n  const { theme, toggleTheme } = useTheme();\n  const { user } = useAuth();\n  const [location] = useLocation();\n  \n\n\n  const navItems = [\n    { href: \"/\", label: \"Dashboard\", active: location === \"/\" },\n    { href: \"/portfolio\", label: \"Portfolio\", active: location === \"/portfolio\" },\n    { href: \"/trade\", label: \"Trade\", active: location === \"/trade\" },\n    { href: \"/watchlist\", label: \"Watchlist\", active: location === \"/watchlist\" },\n    { href: \"/faq\", label: \"FAQ\", active: location === \"/faq\" },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-card border-b border-border/40\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 gradient-animation rounded-lg flex items-center justify-center\">\n              <ChartLine className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\">CryptoTracker</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <span\n                  className={`transition-colors font-medium cursor-pointer ${\n                    item.active\n                      ? \"text-foreground\"\n                      : \"text-muted-foreground hover:text-crypto-primary\"\n                  }`}\n                >\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n          </nav>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"rounded-lg hover:bg-muted transition-all duration-300\"\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"h-4 w-4 text-crypto-warning\" />\n              ) : (\n                <Moon className=\"h-4 w-4 text-crypto-primary\" />\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"flex items-center space-x-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700\"\n                >\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage\n                      src={user?.profileImageUrl || undefined}\n                      alt=\"User avatar\"\n                      className=\"object-cover\"\n                    />\n                    <AvatarFallback>\n                      {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase() || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"hidden sm:block text-sm font-medium\">\n                    {user?.firstName || user?.email?.split(\"@\")[0] || \"User\"}\n                  </span>\n                  <ChevronDown className=\"w-3 h-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => (window.location.href = \"/api/logout\")}>\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile Menu Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n            >\n              <Menu className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4420},"client/src/components/PortfolioDistribution.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { usePortfolio, useUserBalance } from \"@/hooks/usePortfolio\";\nimport { useCryptoPrices } from \"@/hooks/useCryptoPrices\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\nimport { motion } from \"framer-motion\";\n\nexport default function PortfolioDistribution() {\n  const { data: holdings, isLoading: holdingsLoading } = usePortfolio();\n  const { data: userBalance } = useUserBalance();\n  const { data: cryptoPrices } = useCryptoPrices();\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  };\n\n  const getDistributionData = () => {\n    if (!holdings || !cryptoPrices) return [];\n\n    const portfolioData = holdings.map(holding => {\n      const cryptoPrice = cryptoPrices.find(p => p.symbol === holding.symbol);\n      const currentPrice = cryptoPrice?.price || 0;\n      const amount = parseFloat(holding.amount);\n      const value = amount * currentPrice;\n      \n      return {\n        name: holding.symbol,\n        value,\n        change24h: cryptoPrice?.change24h || 0,\n      };\n    }).filter(item => item.value > 0);\n\n    const totalValue = portfolioData.reduce((sum, item) => sum + item.value, 0);\n    \n    const items = portfolioData\n      .map(item => ({\n        ...item,\n        percentage: totalValue > 0 ? ((item.value / totalValue) * 100).toFixed(1) : \"0\",\n      }))\n      .sort((a, b) => b.value - a.value);\n\n    // Add cash if significant\n    const availableCash = userBalance ? parseFloat(userBalance.balance) : 0;\n    if (availableCash > 0) {\n      const totalWithCash = totalValue + availableCash;\n      items.push({\n        name: \"Cash\",\n        value: availableCash,\n        percentage: ((availableCash / totalWithCash) * 100).toFixed(1),\n        change24h: 0,\n      });\n      \n      // Recalculate percentages with cash included\n      items.forEach(item => {\n        if (item.name !== \"Cash\") {\n          item.percentage = ((item.value / totalWithCash) * 100).toFixed(1);\n        }\n      });\n    }\n\n    return items.slice(0, 5); // Show top 5\n  };\n\n  const distributionData = getDistributionData();\n\n  const colors = [\n    \"bg-blue-500\",\n    \"bg-green-500\", \n    \"bg-red-500\",\n    \"bg-yellow-500\",\n    \"bg-purple-500\",\n  ];\n\n  if (holdingsLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-6\">Portfolio Distribution</h3>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center justify-between animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-16 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-12\"></div>\n                  </div>\n                </div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-12\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (distributionData.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-6\">Portfolio Distribution</h3>\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No portfolio data</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Start trading to see your distribution</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-6\">Portfolio Distribution</h3>\n        <div className=\"space-y-4\">\n          {distributionData.map((item, index) => (\n            <motion.div\n              key={item.name}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"flex items-center justify-between\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                {item.name === \"Cash\" ? (\n                  <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-green-600 dark:text-green-400 text-xs font-semibold\">$</span>\n                  </div>\n                ) : (\n                  <CryptoIcon symbol={item.name} size={32} />\n                )}\n                <div>\n                  <p className=\"font-medium\">{item.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {formatCurrency(item.value)}\n                    {item.name !== \"Cash\" && (\n                      <span className={`ml-1 ${item.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {item.change24h >= 0 ? '+' : ''}{item.change24h.toFixed(1)}%\n                      </span>\n                    )}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm font-medium\">{item.percentage}%</span>\n                  <div className={`w-3 h-3 rounded-full ${colors[index % colors.length]}`}></div>\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5712},"client/src/components/PriceChart.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface HistoricalData {\n  timestamp: number;\n  price: number;\n  volume: number;\n}\n\ninterface PortfolioData {\n  totalValue: number;\n  availableCash: number;\n  holdings: Array<{\n    symbol: string;\n    amount: string;\n    currentPrice: number;\n    value: number;\n    change24h: number;\n  }>;\n}\n\nexport default function PriceChart() {\n  const [activeTimeframe, setActiveTimeframe] = useState(\"7\");\n  const [selectedCrypto, setSelectedCrypto] = useState(\"bitcoin\");\n\n  const timeframes = [\n    { label: \"1D\", value: \"1\" },\n    { label: \"1W\", value: \"7\" },\n    { label: \"1M\", value: \"30\" },\n    { label: \"1Y\", value: \"365\" },\n  ];\n\n  const cryptoOptions = [\n    { label: \"Bitcoin\", value: \"bitcoin\" },\n    { label: \"Ethereum\", value: \"ethereum\" },\n    { label: \"Solana\", value: \"solana\" },\n    { label: \"Cardano\", value: \"cardano\" },\n  ];\n\n  const { data: portfolio } = useQuery<PortfolioData>({\n    queryKey: [\"/api/portfolio\"],\n  });\n\n  const { data: chartData, isLoading } = useQuery<HistoricalData[]>({\n    queryKey: [`/api/crypto/${selectedCrypto}/history`, activeTimeframe],\n    queryFn: () => fetch(`/api/crypto/${selectedCrypto}/history?days=${activeTimeframe}`).then(res => res.json()),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  const [animatedData, setAnimatedData] = useState<HistoricalData[]>([]);\n\n  useEffect(() => {\n    if (chartData) {\n      setAnimatedData([]);\n      const timer = setTimeout(() => {\n        setAnimatedData(chartData);\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [chartData]);\n\n  const formatChartData = (data: HistoricalData[]) => {\n    return data.map(item => ({\n      ...item,\n      date: new Date(item.timestamp).toLocaleDateString(),\n      time: new Date(item.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    }));\n  };\n\n  const calculatePortfolioChange = () => {\n    if (!portfolio || !portfolio.holdings.length) return { change: 0, percentage: 0 };\n    \n    const totalChange = portfolio.holdings.reduce((sum, holding) => {\n      return sum + (holding.value * holding.change24h / 100);\n    }, 0);\n    \n    const percentage = portfolio.totalValue > 0 ? (totalChange / portfolio.totalValue) * 100 : 0;\n    return { change: totalChange, percentage };\n  };\n\n  const portfolioChange = calculatePortfolioChange();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n    >\n      <Card className=\"glass-card border-border/20 bg-card/50 backdrop-blur-xl hover-lift\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col space-y-4 mb-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-4 space-y-2 sm:space-y-0\">\n                <h2 className=\"text-lg font-semibold text-foreground\">Portfolio Performance</h2>\n                <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-sm font-medium w-fit ${\n                  portfolioChange.percentage >= 0 \n                    ? \"bg-crypto-success/10 text-crypto-success\" \n                    : \"bg-crypto-danger/10 text-crypto-danger\"\n                }`}>\n                  {portfolioChange.percentage >= 0 ? (\n                    <TrendingUp className=\"w-4 h-4\" />\n                  ) : (\n                    <TrendingDown className=\"w-4 h-4\" />\n                  )}\n                  <span>{portfolioChange.percentage >= 0 ? \"+\" : \"\"}{portfolioChange.percentage.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col space-y-3\">\n              <div className=\"flex flex-wrap gap-2\">\n                {cryptoOptions.map((crypto) => (\n                  <Button\n                    key={crypto.value}\n                    size=\"sm\"\n                    variant={selectedCrypto === crypto.value ? \"default\" : \"outline\"}\n                    className=\"text-xs flex-shrink-0\"\n                    onClick={() => setSelectedCrypto(crypto.value)}\n                  >\n                    {crypto.label}\n                  </Button>\n                ))}\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {timeframes.map((timeframe) => (\n                  <Button\n                    key={timeframe.value}\n                    size=\"sm\"\n                    variant={activeTimeframe === timeframe.value ? \"default\" : \"outline\"}\n                    className=\"px-3 py-1 text-xs flex-shrink-0 min-w-[45px]\"\n                    onClick={() => setActiveTimeframe(timeframe.value)}\n                  >\n                    {timeframe.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n        <div className=\"h-80 w-full\">\n          {isLoading ? (\n            <div className=\"h-full flex items-center justify-center\">\n              <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n            </div>\n          ) : animatedData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={formatChartData(animatedData)}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" opacity={0.3} />\n                <XAxis \n                  dataKey={activeTimeframe === \"1\" ? \"time\" : \"date\"}\n                  stroke=\"var(--foreground)\"\n                  fontSize={12}\n                  tick={{ fill: 'var(--foreground)' }}\n                />\n                <YAxis \n                  stroke=\"var(--foreground)\"\n                  fontSize={12}\n                  tick={{ fill: 'var(--foreground)' }}\n                  tickFormatter={(value) => `$${value.toLocaleString()}`}\n                />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'var(--card)',\n                    border: '1px solid var(--border)',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                  labelStyle={{ color: 'var(--foreground)' }}\n                  formatter={(value: any) => [`$${value.toLocaleString()}`, 'Price']}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"price\" \n                  stroke=\"var(--crypto-primary)\"\n                  strokeWidth={2}\n                  dot={false}\n                  activeDot={{ r: 4, fill: \"var(--crypto-primary)\" }}\n                  animationDuration={1000}\n                  animationEasing=\"ease-out\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"h-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <p className=\"text-muted-foreground mb-2\">Chart data unavailable</p>\n                <p className=\"text-sm text-muted-foreground\">Try selecting a different cryptocurrency or timeframe</p>\n              </div>\n            </div>\n          )}\n        </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":7636},"client/src/components/RecentTransactions.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useTransactions } from \"@/hooks/usePortfolio\";\nimport { ArrowUp, ArrowDown } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function RecentTransactions() {\n  const { data: transactions, isLoading } = useTransactions();\n\n  const formatCurrency = (value: string | number) => {\n    const num = typeof value === \"string\" ? parseFloat(value) : value;\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(num);\n  };\n\n  const getTransactionColor = (type: \"buy\" | \"sell\") => {\n    return type === \"buy\" ? \"text-green-400\" : \"text-red-400\";\n  };\n\n  const formatAmount = (amount: string, symbol: string) => {\n    const num = parseFloat(amount);\n    return `${num.toFixed(symbol === \"BTC\" ? 8 : 4)} ${symbol}`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold\">Recent Transactions</h3>\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center justify-between animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-20 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-16 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-12\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!transactions || transactions.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold\">Recent Transactions</h3>\n          </div>\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No transactions yet</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Start trading to see your transaction history</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const recentTransactions = transactions.slice(0, 5);\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold\">Recent Transactions</h3>\n        </div>\n        <div className=\"space-y-4\">\n          {recentTransactions.map((transaction) => (\n            <div key={transaction.id} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`p-2 rounded-full ${\n                  transaction.type === \"buy\" ? \"bg-green-100 dark:bg-green-900/20\" : \"bg-red-100 dark:bg-red-900/20\"\n                }`}>\n                  {transaction.type === \"buy\" ? (\n                    <ArrowUp className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                  ) : (\n                    <ArrowDown className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                  )}\n                </div>\n                <div>\n                  <p className=\"font-medium\">\n                    {transaction.type === \"buy\" ? \"Bought\" : \"Sold\"} {transaction.symbol}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {formatDistanceToNow(new Date(transaction.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-medium\">{formatAmount(transaction.amount, transaction.symbol)}</p>\n                <p className={`text-sm ${getTransactionColor(transaction.type)}`}>\n                  {formatCurrency(transaction.total)}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4467},"client/src/components/ThemeProvider.tsx":{"content":"import { useState, useEffect, ReactNode } from \"react\";\nimport { ThemeContext } from \"@/contexts/ThemeContext\";\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    // Check for saved theme preference or default to dark mode\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else {\n      // Default to dark mode for crypto app\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // Apply theme to document\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","size_bytes":1015},"client/src/components/TradingModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTradeMutation, usePortfolio, useUserBalance } from \"@/hooks/usePortfolio\";\nimport { type CryptoPrice } from \"@/hooks/useCryptoPrices\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\nimport { ArrowUp, ArrowDown, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface TradingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  crypto: CryptoPrice | null;\n  tradeType: \"buy\" | \"sell\";\n}\n\nexport default function TradingModal({ isOpen, onClose, crypto, tradeType }: TradingModalProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [activeTradeType, setActiveTradeType] = useState<\"buy\" | \"sell\">(tradeType);\n  const { toast } = useToast();\n  const tradeMutation = useTradeMutation();\n  const { data: holdings } = usePortfolio();\n  const { data: userBalance } = useUserBalance();\n\n  useEffect(() => {\n    setActiveTradeType(tradeType);\n  }, [tradeType]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setAmount(\"\");\n    }\n  }, [isOpen]);\n\n  if (!crypto) return null;\n\n  const availableCash = userBalance ? parseFloat(userBalance.balance) : 0;\n  const holding = holdings?.find(h => h.symbol === crypto.symbol);\n  const availableAmount = holding ? parseFloat(holding.amount) : 0;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const total = parseFloat(amount) * crypto.price;\n    const fee = total * 0.005; // 0.5% fee\n\n    if (activeTradeType === \"buy\") {\n      if (total + fee > availableCash) {\n        toast({\n          title: \"Insufficient Funds\",\n          description: \"You don't have enough cash for this purchase\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else {\n      if (parseFloat(amount) > availableAmount) {\n        toast({\n          title: \"Insufficient Holdings\",\n          description: \"You don't have enough of this cryptocurrency to sell\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    tradeMutation.mutate({\n      symbol: crypto.symbol,\n      type: activeTradeType,\n      amount,\n      price: crypto.price.toString(),\n    });\n  };\n\n  const total = parseFloat(amount || \"0\") * crypto.price;\n  const fee = total * 0.005;\n  const finalTotal = activeTradeType === \"buy\" ? total + fee : total - fee;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <CryptoIcon symbol={crypto.symbol} size={32} />\n            <div>\n              <div className=\"text-left\">\n                {activeTradeType === \"buy\" ? \"Buy\" : \"Sell\"} {crypto.name}\n              </div>\n              <div className=\"text-sm text-muted-foreground font-normal\">\n                ${crypto.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}\n                <span className={`ml-2 ${crypto.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {crypto.change24h >= 0 ? '+' : ''}{crypto.change24h.toFixed(2)}%\n                </span>\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex space-x-2\">\n            <Button\n              type=\"button\"\n              variant={activeTradeType === \"buy\" ? \"default\" : \"outline\"}\n              className=\"flex-1\"\n              onClick={() => setActiveTradeType(\"buy\")}\n            >\n              Buy\n            </Button>\n            <Button\n              type=\"button\"\n              variant={activeTradeType === \"sell\" ? \"default\" : \"outline\"}\n              className=\"flex-1\"\n              onClick={() => setActiveTradeType(\"sell\")}\n              disabled={!holding || availableAmount === 0}\n            >\n              Sell\n            </Button>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"amount\">Amount ({crypto.symbol})</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"any\"\n                min=\"0\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                placeholder={`Enter ${crypto.symbol} amount`}\n                required\n              />\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {activeTradeType === \"buy\" \n                  ? `Available cash: $${availableCash.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`\n                  : `Available: ${availableAmount.toFixed(6)} ${crypto.symbol}`\n                }\n              </div>\n            </div>\n\n            {amount && parseFloat(amount) > 0 && (\n              <div className=\"bg-muted/50 p-4 rounded-lg space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Amount:</span>\n                  <span>{parseFloat(amount).toFixed(6)} {crypto.symbol}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Price:</span>\n                  <span>${crypto.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Subtotal:</span>\n                  <span>${total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Fee (0.5%):</span>\n                  <span>${fee.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>\n                </div>\n                <hr className=\"border-muted-foreground/20\" />\n                <div className=\"flex justify-between font-medium\">\n                  <span>Total:</span>\n                  <span className={activeTradeType === \"buy\" ? \"text-red-600\" : \"text-green-600\"}>\n                    {activeTradeType === \"buy\" ? \"-\" : \"+\"}${Math.abs(finalTotal).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={tradeMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className={`flex-1 ${\n                  activeTradeType === \"buy\" \n                    ? \"bg-green-600 hover:bg-green-700\" \n                    : \"bg-red-600 hover:bg-red-700\"\n                }`}\n                disabled={tradeMutation.isPending || !amount || parseFloat(amount) <= 0}\n              >\n                {tradeMutation.isPending ? \"Processing...\" : `${activeTradeType === \"buy\" ? \"Buy\" : \"Sell\"} ${crypto.symbol}`}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7741},"client/src/components/Watchlist.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, X, ArrowUp, ArrowDown } from \"lucide-react\";\nimport { useWatchlist, useWatchlistMutation } from \"@/hooks/usePortfolio\";\nimport { useCryptoPrices } from \"@/hooks/useCryptoPrices\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\nimport { motion } from \"framer-motion\";\n\nexport default function Watchlist() {\n  const { data: watchlist, isLoading } = useWatchlist();\n  const { data: cryptoPrices } = useCryptoPrices();\n  const watchlistMutation = useWatchlistMutation();\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: price < 1 ? 6 : 2,\n    }).format(price);\n  };\n\n  const formatPercent = (change: number) => {\n    return `${change >= 0 ? \"+\" : \"\"}${change.toFixed(1)}%`;\n  };\n\n  const handleAddToWatchlist = () => {\n    const availableCryptos = [\"MATIC\", \"LINK\", \"AVAX\", \"BNB\", \"XRP\", \"DOGE\"];\n    const currentSymbols = watchlist?.map(item => item.symbol) || [];\n    const availableToAdd = availableCryptos.filter(symbol => !currentSymbols.includes(symbol));\n    \n    if (availableToAdd.length > 0) {\n      const randomSymbol = availableToAdd[Math.floor(Math.random() * availableToAdd.length)];\n      watchlistMutation.mutate({ action: \"add\", symbol: randomSymbol });\n    }\n  };\n\n  const handleRemoveFromWatchlist = (symbol: string) => {\n    watchlistMutation.mutate({ action: \"remove\", symbol });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold\">Watchlist</h3>\n            <Button size=\"icon\" variant=\"ghost\">\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center justify-between animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-16 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-12\"></div>\n                  </div>\n                </div>\n                <div className=\"h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const watchlistWithPrices = watchlist?.map(item => {\n    const cryptoPrice = cryptoPrices?.find(p => p.symbol === item.symbol);\n    return {\n      ...item,\n      price: cryptoPrice?.price || 0,\n      change24h: cryptoPrice?.change24h || 0,\n    };\n  }) || [];\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold\">Watchlist</h3>\n          <Button \n            size=\"icon\" \n            variant=\"ghost\"\n            onClick={handleAddToWatchlist}\n            disabled={watchlistMutation.isPending}\n          >\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {watchlistWithPrices.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No cryptocurrencies in watchlist</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Add some to track their prices</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {watchlistWithPrices.map((item, index) => (\n              <motion.div\n                key={item.id}\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <CryptoIcon symbol={item.symbol} size={32} />\n                  <div>\n                    <p className=\"font-medium\">{item.symbol}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatPrice(item.price)}\n                      <span className={`ml-2 ${item.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {item.change24h >= 0 ? <ArrowUp className=\"inline w-3 h-3 mr-1\" /> : <ArrowDown className=\"inline w-3 h-3 mr-1\" />}\n                        {formatPercent(item.change24h)}\n                      </span>\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => handleRemoveFromWatchlist(item.symbol)}\n                  disabled={watchlistMutation.isPending}\n                  className=\"text-muted-foreground hover:text-red-600\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5297},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext } from \"react\";\n\ninterface ThemeContextType {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":420},"client/src/hooks/use-mobile.tsx":{"content":"import {useState, useEffect} from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState<boolean | undefined>(undefined)\n\n  useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":564},"client/src/hooks/use-toast.ts":{"content":"import {ReactNode, useEffect, useState} from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: ReactNode\n  description?: ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = useState<State>(memoryState)\n\n  useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3893},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\n\n// Mock user for demo purposes\nconst mockUser: User = {\n  id: \"demo-user-1\",\n  email: \"demo@cryptotracker.com\",\n  firstName: \"Demo\",\n  lastName: \"User\",\n  profileImageUrl: null,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Immediately set mock user for frontend-only deployment\n    setUser(mockUser);\n    setIsAuthenticated(true);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    error: null,\n  };\n}\n","size_bytes":775},"client/src/hooks/useCryptoPrices.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { mockCryptoPrices } from \"@/lib/mockData\";\n\nexport interface CryptoPrice {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h: number;\n  cgId: string;\n}\n\n// CoinGecko API service with fallback to mock data\nasync function fetchCryptoPrices(): Promise<CryptoPrice[]> {\n  try {\n    // Try to fetch real data from CoinGecko\n    const symbols = mockCryptoPrices.map(crypto => crypto.cgId).join(\",\");\n    const response = await fetch(\n      `https://api.coingecko.com/api/v3/simple/price?ids=${symbols}&vs_currencies=usd&include_24hr_change=true`\n    );\n    \n    if (!response.ok) {\n      throw new Error(\"API request failed\");\n    }\n    \n    const data = await response.json();\n    \n    // Transform API response to match our interface\n    return mockCryptoPrices.map(crypto => ({\n      ...crypto,\n      price: data[crypto.cgId]?.usd || crypto.price,\n      change24h: data[crypto.cgId]?.usd_24h_change || crypto.change24h,\n    }));\n  } catch (error) {\n    console.log(\"Using fallback crypto prices data\");\n    // Return mock data if API fails\n    return mockCryptoPrices;\n  }\n}\n\nexport function useCryptoPrices() {\n  return useQuery<CryptoPrice[]>({\n    queryKey: [\"crypto-prices\"],\n    queryFn: fetchCryptoPrices,\n    staleTime: 30 * 1000, // 30 seconds\n    refetchInterval: 30 * 1000, // Refetch every 30 seconds\n  });\n}\n\nexport function useCryptoPrice(symbol: string) {\n  const { data: prices, ...rest } = useCryptoPrices();\n  \n  const price = prices?.find(p => p.symbol === symbol);\n  \n  return {\n    data: price,\n    ...rest,\n  };\n}\n\n// Generate mock historical data for charts\nexport function generateMockHistoricalData(symbol: string, days: number = 30) {\n  const data = [];\n  const now = Date.now();\n  const basePrice = mockCryptoPrices.find(p => p.symbol === symbol)?.price || 100;\n  \n  for (let i = days; i >= 0; i--) {\n    const timestamp = now - (i * 24 * 60 * 60 * 1000);\n    const volatility = 0.05; // 5% daily volatility\n    const randomChange = (Math.random() - 0.5) * 2 * volatility;\n    const price = basePrice * (1 + randomChange * Math.sqrt(i / days));\n    \n    data.push({\n      timestamp,\n      price: parseFloat(price.toFixed(8)),\n    });\n  }\n  \n  return data;\n}\n\nexport function useCryptoHistory(symbol: string) {\n  return useQuery({\n    queryKey: [\"crypto-history\", symbol],\n    queryFn: () => generateMockHistoricalData(symbol),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}","size_bytes":2471},"client/src/hooks/usePortfolio.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Holding, Transaction, WatchlistItem, UserBalance } from \"@shared/schema\";\nimport { \n  mockHoldings, \n  mockTransactions, \n  mockWatchlist, \n  mockUserBalance,\n  loadFromLocalStorage,\n  saveToLocalStorage,\n  initializeMockData \n} from \"@/lib/mockData\";\n\n// Initialize mock data on first load\ninitializeMockData();\n\nexport function usePortfolio() {\n  return useQuery<Holding[]>({\n    queryKey: [\"portfolio\"],\n    queryFn: () => {\n      return loadFromLocalStorage(\"cryptotracker_holdings\", mockHoldings);\n    },\n    staleTime: 0,\n  });\n}\n\nexport function useTransactions() {\n  return useQuery<Transaction[]>({\n    queryKey: [\"transactions\"],\n    queryFn: () => {\n      return loadFromLocalStorage(\"cryptotracker_transactions\", mockTransactions);\n    },\n    staleTime: 0,\n  });\n}\n\nexport function useWatchlist() {\n  return useQuery<WatchlistItem[]>({\n    queryKey: [\"watchlist\"],\n    queryFn: () => {\n      return loadFromLocalStorage(\"cryptotracker_watchlist\", mockWatchlist);\n    },\n    staleTime: 0,\n  });\n}\n\nexport function useUserBalance() {\n  return useQuery<UserBalance>({\n    queryKey: [\"balance\"],\n    queryFn: () => {\n      return loadFromLocalStorage(\"cryptotracker_balance\", mockUserBalance);\n    },\n    staleTime: 0,\n  });\n}\n\nexport function useTradeMutation() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ symbol, type, amount, price }: {\n      symbol: string;\n      type: \"buy\" | \"sell\";\n      amount: string;\n      price: string;\n    }) => {\n      // Simulate trade processing\n      const holdings = loadFromLocalStorage(\"cryptotracker_holdings\", mockHoldings);\n      const transactions = loadFromLocalStorage(\"cryptotracker_transactions\", mockTransactions);\n      const balance = loadFromLocalStorage(\"cryptotracker_balance\", mockUserBalance);\n      \n      const total = parseFloat(amount) * parseFloat(price);\n      const fee = total * 0.005; // 0.5% fee\n      \n      // Create new transaction\n      const newTransaction: Transaction = {\n        id: Date.now(),\n        userId: \"demo-user-1\",\n        symbol,\n        type,\n        amount,\n        price,\n        total: total.toFixed(8),\n        fee: fee.toFixed(8),\n        createdAt: new Date(),\n      };\n      \n      // Update holdings\n      let updatedHoldings = [...holdings];\n      const existingHoldingIndex = holdings.findIndex((h: Holding) => h.symbol === symbol);\n      \n      if (type === \"buy\") {\n        if (existingHoldingIndex >= 0) {\n          const currentAmount = parseFloat(updatedHoldings[existingHoldingIndex].amount);\n          updatedHoldings[existingHoldingIndex].amount = (currentAmount + parseFloat(amount)).toFixed(8);\n          updatedHoldings[existingHoldingIndex].updatedAt = new Date();\n        } else {\n          updatedHoldings.push({\n            id: Date.now() + 1,\n            userId: \"demo-user-1\",\n            symbol,\n            amount,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          });\n        }\n        \n        // Deduct from balance\n        balance.balance = (parseFloat(balance.balance) - total - fee).toFixed(2);\n      } else {\n        // Sell\n        if (existingHoldingIndex >= 0) {\n          const currentAmount = parseFloat(updatedHoldings[existingHoldingIndex].amount);\n          const newAmount = currentAmount - parseFloat(amount);\n          \n          if (newAmount <= 0) {\n            updatedHoldings.splice(existingHoldingIndex, 1);\n          } else {\n            updatedHoldings[existingHoldingIndex].amount = newAmount.toFixed(8);\n            updatedHoldings[existingHoldingIndex].updatedAt = new Date();\n          }\n        }\n        \n        // Add to balance\n        balance.balance = (parseFloat(balance.balance) + total - fee).toFixed(2);\n      }\n      \n      balance.updatedAt = new Date();\n      \n      // Save updates\n      saveToLocalStorage(\"cryptotracker_holdings\", updatedHoldings);\n      saveToLocalStorage(\"cryptotracker_transactions\", [newTransaction, ...transactions]);\n      saveToLocalStorage(\"cryptotracker_balance\", balance);\n      \n      return newTransaction;\n    },\n    onSuccess: () => {\n      // Invalidate and refetch portfolio data\n      queryClient.invalidateQueries({ queryKey: [\"portfolio\"] });\n      queryClient.invalidateQueries({ queryKey: [\"transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"balance\"] });\n    },\n  });\n}\n\nexport function useWatchlistMutation() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ action, symbol }: {\n      action: \"add\" | \"remove\";\n      symbol: string;\n    }) => {\n      const watchlist = loadFromLocalStorage(\"cryptotracker_watchlist\", mockWatchlist);\n      \n      if (action === \"add\") {\n        const newItem: WatchlistItem = {\n          id: Date.now(),\n          userId: \"demo-user-1\",\n          symbol,\n          createdAt: new Date(),\n        };\n        \n        const updatedWatchlist = [...watchlist, newItem];\n        saveToLocalStorage(\"cryptotracker_watchlist\", updatedWatchlist);\n        return updatedWatchlist;\n      } else {\n        const updatedWatchlist = watchlist.filter((item: WatchlistItem) => item.symbol !== symbol);\n        saveToLocalStorage(\"cryptotracker_watchlist\", updatedWatchlist);\n        return updatedWatchlist;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"watchlist\"] });\n    },\n  });\n}","size_bytes":5485},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/mockData.ts":{"content":"import type { Holding, Transaction, WatchlistItem, UserBalance } from \"@shared/schema\";\n\n// Mock portfolio data for demo\nexport const mockHoldings: Holding[] = [\n  {\n    id: 1,\n    userId: \"demo-user-1\",\n    symbol: \"BTC\",\n    amount: \"0.25000000\",\n    createdAt: new Date(\"2024-01-15\"),\n    updatedAt: new Date(\"2024-01-15\"),\n  },\n  {\n    id: 2,\n    userId: \"demo-user-1\",\n    symbol: \"ETH\",\n    amount: \"2.50000000\",\n    createdAt: new Date(\"2024-01-20\"),\n    updatedAt: new Date(\"2024-01-20\"),\n  },\n  {\n    id: 3,\n    userId: \"demo-user-1\",\n    symbol: \"ADA\",\n    amount: \"1000.00000000\",\n    createdAt: new Date(\"2024-01-25\"),\n    updatedAt: new Date(\"2024-01-25\"),\n  },\n  {\n    id: 4,\n    userId: \"demo-user-1\",\n    symbol: \"SOL\",\n    amount: \"15.00000000\",\n    createdAt: new Date(\"2024-02-01\"),\n    updatedAt: new Date(\"2024-02-01\"),\n  },\n];\n\nexport const mockTransactions: Transaction[] = [\n  {\n    id: 1,\n    userId: \"demo-user-1\",\n    symbol: \"BTC\",\n    type: \"buy\",\n    amount: \"0.25000000\",\n    price: \"45000.00000000\",\n    total: \"11250.00000000\",\n    fee: \"56.25000000\",\n    createdAt: new Date(\"2024-01-15\"),\n  },\n  {\n    id: 2,\n    userId: \"demo-user-1\",\n    symbol: \"ETH\",\n    type: \"buy\",\n    amount: \"2.50000000\",\n    price: \"2800.00000000\",\n    total: \"7000.00000000\",\n    fee: \"35.00000000\",\n    createdAt: new Date(\"2024-01-20\"),\n  },\n  {\n    id: 3,\n    userId: \"demo-user-1\",\n    symbol: \"ADA\",\n    type: \"buy\",\n    amount: \"1000.00000000\",\n    price: \"0.45000000\",\n    total: \"450.00000000\",\n    fee: \"2.25000000\",\n    createdAt: new Date(\"2024-01-25\"),\n  },\n  {\n    id: 4,\n    userId: \"demo-user-1\",\n    symbol: \"SOL\",\n    type: \"buy\",\n    amount: \"15.00000000\",\n    price: \"80.00000000\",\n    total: \"1200.00000000\",\n    fee: \"6.00000000\",\n    createdAt: new Date(\"2024-02-01\"),\n  },\n  {\n    id: 5,\n    userId: \"demo-user-1\",\n    symbol: \"BTC\",\n    type: \"sell\",\n    amount: \"0.05000000\",\n    price: \"48000.00000000\",\n    total: \"2400.00000000\",\n    fee: \"12.00000000\",\n    createdAt: new Date(\"2024-02-10\"),\n  },\n];\n\nexport const mockWatchlist: WatchlistItem[] = [\n  {\n    id: 1,\n    userId: \"demo-user-1\",\n    symbol: \"MATIC\",\n    createdAt: new Date(\"2024-01-10\"),\n  },\n  {\n    id: 2,\n    userId: \"demo-user-1\",\n    symbol: \"LINK\",\n    createdAt: new Date(\"2024-01-12\"),\n  },\n  {\n    id: 3,\n    userId: \"demo-user-1\",\n    symbol: \"AVAX\",\n    createdAt: new Date(\"2024-01-18\"),\n  },\n  {\n    id: 4,\n    userId: \"demo-user-1\",\n    symbol: \"DOT\",\n    createdAt: new Date(\"2024-01-22\"),\n  },\n];\n\nexport const mockUserBalance: UserBalance = {\n  id: 1,\n  userId: \"demo-user-1\",\n  balance: \"5843.75\",\n  updatedAt: new Date(\"2024-02-10\"),\n};\n\n// Cryptocurrency price data (fallback when API is unavailable)\nexport const mockCryptoPrices = [\n  {\n    symbol: \"BTC\",\n    name: \"Bitcoin\",\n    price: 106535.00,\n    change24h: 3.68,\n    cgId: \"bitcoin\"\n  },\n  {\n    symbol: \"ETH\",\n    name: \"Ethereum\", \n    price: 3245.50,\n    change24h: -1.24,\n    cgId: \"ethereum\"\n  },\n  {\n    symbol: \"ADA\",\n    name: \"Cardano\",\n    price: 0.4567,\n    change24h: 2.15,\n    cgId: \"cardano\"\n  },\n  {\n    symbol: \"SOL\",\n    name: \"Solana\",\n    price: 89.45,\n    change24h: -0.87,\n    cgId: \"solana\"\n  },\n  {\n    symbol: \"MATIC\",\n    name: \"Polygon\",\n    price: 0.3456,\n    change24h: 1.23,\n    cgId: \"polygon\"\n  },\n  {\n    symbol: \"LINK\",\n    name: \"Chainlink\",\n    price: 11.78,\n    change24h: -2.34,\n    cgId: \"chainlink\"\n  },\n  {\n    symbol: \"AVAX\",\n    name: \"Avalanche\",\n    price: 17.59,\n    change24h: -2.76,\n    cgId: \"avalanche-2\"\n  },\n  {\n    symbol: \"BNB\",\n    name: \"BNB\",\n    price: 652.67,\n    change24h: -0.13,\n    cgId: \"binancecoin\"\n  },\n  {\n    symbol: \"XRP\",\n    name: \"XRP\",\n    price: 2.34,\n    change24h: 0.56,\n    cgId: \"ripple\"\n  },\n  {\n    symbol: \"DOGE\",\n    name: \"Dogecoin\",\n    price: 0.3789,\n    change24h: 4.21,\n    cgId: \"dogecoin\"\n  },\n  {\n    symbol: \"DOT\",\n    name: \"Polkadot\",\n    price: 4.56,\n    change24h: -1.45,\n    cgId: \"polkadot\"\n  },\n  {\n    symbol: \"SHIB\",\n    name: \"Shiba Inu\",\n    price: 0.00001234,\n    change24h: 2.67,\n    cgId: \"shiba-inu\"\n  },\n  {\n    symbol: \"UNI\",\n    name: \"Uniswap\",\n    price: 8.45,\n    change24h: -0.98,\n    cgId: \"uniswap\"\n  },\n  {\n    symbol: \"LTC\",\n    name: \"Litecoin\",\n    price: 67.89,\n    change24h: 1.87,\n    cgId: \"litecoin\"\n  },\n  {\n    symbol: \"ATOM\",\n    name: \"Cosmos\",\n    price: 5.67,\n    change24h: -0.43,\n    cgId: \"cosmos\"\n  },\n  {\n    symbol: \"ALGO\",\n    name: \"Algorand\",\n    price: 0.1871,\n    change24h: 3.68,\n    cgId: \"algorand\"\n  },\n  {\n    symbol: \"NEAR\",\n    name: \"NEAR Protocol\",\n    price: 3.45,\n    change24h: -1.23,\n    cgId: \"near\"\n  },\n  {\n    symbol: \"VET\",\n    name: \"VeChain\",\n    price: 0.02345,\n    change24h: 0.87,\n    cgId: \"vechain\"\n  },\n  {\n    symbol: \"FIL\",\n    name: \"Filecoin\",\n    price: 4.23,\n    change24h: -2.15,\n    cgId: \"filecoin\"\n  },\n  {\n    symbol: \"TRX\",\n    name: \"TRON\",\n    price: 0.2456,\n    change24h: 1.45,\n    cgId: \"tron\"\n  },\n];\n\n// Store data in localStorage\nexport const saveToLocalStorage = (key: string, data: any) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch (error) {\n    console.error(\"Error saving to localStorage:\", error);\n  }\n};\n\n// Load data from localStorage\nexport const loadFromLocalStorage = (key: string, fallback: any) => {\n  try {\n    const stored = localStorage.getItem(key);\n    return stored ? JSON.parse(stored) : fallback;\n  } catch (error) {\n    console.error(\"Error loading from localStorage:\", error);\n    return fallback;\n  }\n};\n\n// Initialize mock data in localStorage\nexport const initializeMockData = () => {\n  if (!localStorage.getItem(\"cryptotracker_holdings\")) {\n    saveToLocalStorage(\"cryptotracker_holdings\", mockHoldings);\n  }\n  if (!localStorage.getItem(\"cryptotracker_transactions\")) {\n    saveToLocalStorage(\"cryptotracker_transactions\", mockTransactions);\n  }\n  if (!localStorage.getItem(\"cryptotracker_watchlist\")) {\n    saveToLocalStorage(\"cryptotracker_watchlist\", mockWatchlist);\n  }\n  if (!localStorage.getItem(\"cryptotracker_balance\")) {\n    saveToLocalStorage(\"cryptotracker_balance\", mockUserBalance);\n  }\n};","size_bytes":6130},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1399},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/Header\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport PriceChart from \"@/components/PriceChart\";\nimport CryptoList from \"@/components/CryptoList\";\nimport PortfolioDistribution from \"@/components/PortfolioDistribution\";\nimport RecentTransactions from \"@/components/RecentTransactions\";\nimport Watchlist from \"@/components/Watchlist\";\nimport TradingModal from \"@/components/TradingModal\";\nimport { Home, PieChart, ArrowUpDown, Star } from \"lucide-react\";\n\ninterface CryptoPrice {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h: number;\n  coinGeckoId: string;\n}\n\nexport default function Dashboard() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [tradingModalOpen, setTradingModalOpen] = useState(false);\n  const [selectedCrypto, setSelectedCrypto] = useState<CryptoPrice | null>(null);\n  const [tradeType, setTradeType] = useState<\"buy\" | \"sell\">(\"buy\");\n\n  // No redirect logic needed - router handles authentication\n\n  const handleTrade = (crypto: CryptoPrice, type: \"buy\" | \"sell\") => {\n    setSelectedCrypto(crypto);\n    setTradeType(type);\n    setTradingModalOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-crypto-dark\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-16 bg-white dark:bg-crypto-card-dark border-b\"></div>\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"h-32 bg-white dark:bg-crypto-card-dark rounded-2xl\"></div>\n              ))}\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 space-y-8\">\n                <div className=\"h-96 bg-white dark:bg-crypto-card-dark rounded-2xl\"></div>\n                <div className=\"h-64 bg-white dark:bg-crypto-card-dark rounded-2xl\"></div>\n              </div>\n              <div className=\"space-y-6\">\n                <div className=\"h-64 bg-white dark:bg-crypto-card-dark rounded-2xl\"></div>\n                <div className=\"h-48 bg-white dark:bg-crypto-card-dark rounded-2xl\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Dashboard content (authentication is handled by router)\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20 text-foreground transition-all duration-500\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <DashboardStats />\n        </motion.div>\n\n        <motion.div \n          className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, delay: 0.2 }}\n        >\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n            >\n              <PriceChart />\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <CryptoList onTrade={handleTrade} />\n            </motion.div>\n          </div>\n\n          {/* Sidebar */}\n          <motion.div \n            className=\"space-y-6\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.5 }}\n          >\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.6 }}\n            >\n              <PortfolioDistribution />\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.7 }}\n            >\n              <RecentTransactions />\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.8 }}\n            >\n              <Watchlist />\n            </motion.div>\n          </motion.div>\n        </motion.div>\n      </div>\n\n      {/* Trading Modal */}\n      <TradingModal\n        isOpen={tradingModalOpen}\n        onClose={() => setTradingModalOpen(false)}\n        crypto={selectedCrypto}\n        tradeType={tradeType}\n      />\n\n      {/* Mobile Bottom Navigation */}\n      <div className=\"fixed bottom-0 left-0 right-0 glass-card border-t border-border/40 md:hidden z-10\">\n        <div className=\"flex items-center justify-around py-3\">\n          <Link href=\"/\">\n            <span className=\"flex flex-col items-center space-y-1 text-crypto-primary cursor-pointer\">\n              <Home className=\"w-5 h-5\" />\n              <span className=\"text-xs font-medium\">Home</span>\n            </span>\n          </Link>\n          <Link href=\"/portfolio\">\n            <span className=\"flex flex-col items-center space-y-1 text-muted-foreground hover:text-crypto-primary transition-colors cursor-pointer\">\n              <PieChart className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Portfolio</span>\n            </span>\n          </Link>\n          <Link href=\"/trade\">\n            <span className=\"flex flex-col items-center space-y-1 text-muted-foreground hover:text-crypto-primary transition-colors cursor-pointer\">\n              <ArrowUpDown className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Trade</span>\n            </span>\n          </Link>\n          <Link href=\"/watchlist\">\n            <span className=\"flex flex-col items-center space-y-1 text-muted-foreground hover:text-crypto-primary transition-colors cursor-pointer\">\n              <Star className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Watchlist</span>\n            </span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6684},"client/src/pages/FAQ.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ChevronDown, ChevronUp, Shield, TrendingUp, Wallet, HelpCircle, Lock, DollarSign } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface FAQItem {\n  id: number;\n  question: string;\n  answer: string;\n  icon: React.ReactNode;\n  category: string;\n}\n\nconst faqData: FAQItem[] = [\n  {\n    id: 1,\n    question: \"Is my money safe on this platform?\",\n    answer: \"This is a simulated trading platform using virtual funds. No real money is involved in any transactions. Your account starts with $10,000 in virtual cash to practice trading without financial risk.\",\n    icon: <Shield className=\"w-5 h-5 text-crypto-success\" />,\n    category: \"Security\"\n  },\n  {\n    id: 2,\n    question: \"How accurate are the cryptocurrency prices?\",\n    answer: \"All prices are pulled in real-time from CoinGecko API, ensuring you see the most current market data. Price updates occur every 30 seconds to provide accurate trading simulations.\",\n    icon: <TrendingUp className=\"w-5 h-5 text-crypto-primary\" />,\n    category: \"Trading\"\n  },\n  {\n    id: 3,\n    question: \"Can I withdraw my portfolio balance?\",\n    answer: \"No, this platform uses virtual money for educational purposes only. All funds, gains, and losses are simulated. This allows you to learn crypto trading strategies without any financial risk.\",\n    icon: <Wallet className=\"w-5 h-5 text-crypto-warning\" />,\n    category: \"Portfolio\"\n  },\n  {\n    id: 4,\n    question: \"How do I add cryptocurrencies to my watchlist?\",\n    answer: \"Navigate to the Watchlist tab and click the '+' button to search and add cryptocurrencies. You can monitor price movements and receive updates on your favorite coins.\",\n    icon: <HelpCircle className=\"w-5 h-5 text-crypto-danger\" />,\n    category: \"Features\"\n  },\n  {\n    id: 5,\n    question: \"Are there any trading fees?\",\n    answer: \"Yes, realistic trading fees are applied to simulate real market conditions. This helps you understand the impact of fees on your trading strategy and portfolio performance.\",\n    icon: <DollarSign className=\"w-5 h-5 text-crypto-success\" />,\n    category: \"Trading\"\n  },\n  {\n    id: 6,\n    question: \"How is my data protected?\",\n    answer: \"We use industry-standard security measures including encrypted connections, secure authentication, and data protection protocols. Your trading activity and personal information are kept secure.\",\n    icon: <Lock className=\"w-5 h-5 text-crypto-primary\" />,\n    category: \"Security\"\n  },\n  {\n    id: 7,\n    question: \"Can I reset my portfolio?\",\n    answer: \"Currently, portfolio reset is not available through the interface. Your virtual trading history helps track your learning progress over time.\",\n    icon: <TrendingUp className=\"w-5 h-5 text-crypto-danger\" />,\n    category: \"Portfolio\"\n  },\n  {\n    id: 8,\n    question: \"What cryptocurrencies can I trade?\",\n    answer: \"You can trade 20+ major cryptocurrencies including Bitcoin, Ethereum, Cardano, Solana, and many others. All supported coins are listed in the trading section.\",\n    icon: <Wallet className=\"w-5 h-5 text-crypto-warning\" />,\n    category: \"Trading\"\n  }\n];\n\nexport default function FAQ() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [openItems, setOpenItems] = useState<number[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"All\");\n\n  const categories = [\"All\", ...Array.from(new Set(faqData.map(item => item.category)))];\n\n  const toggleItem = (id: number) => {\n    setOpenItems(prev => \n      prev.includes(id) \n        ? prev.filter(item => item !== id)\n        : [...prev, id]\n    );\n  };\n\n  const filteredFAQs = selectedCategory === \"All\" \n    ? faqData \n    : faqData.filter(item => item.category === selectedCategory);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-12 bg-muted rounded w-64\"></div>\n            <div className=\"h-6 bg-muted rounded w-96\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-16 bg-muted rounded-2xl\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center mb-12\"\n        >\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Frequently Asked Questions\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Get answers to common questions about our crypto trading simulator\n          </p>\n        </motion.div>\n\n        {/* Category Filter */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.1 }}\n          className=\"flex flex-wrap gap-2 mb-8 justify-center\"\n        >\n          {categories.map((category) => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(category)}\n              className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${\n                selectedCategory === category\n                  ? \"bg-crypto-primary text-white shadow-lg\"\n                  : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n              }`}\n            >\n              {category}\n            </button>\n          ))}\n        </motion.div>\n\n        {/* FAQ Items */}\n        <div className=\"space-y-4\">\n          {filteredFAQs.map((item, index) => (\n            <motion.div\n              key={item.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n            >\n              <Card className=\"glass-card border-border/20 bg-card/50 backdrop-blur-xl hover:bg-card/60 transition-all duration-300\">\n                <CardContent className=\"p-0\">\n                  <button\n                    onClick={() => toggleItem(item.id)}\n                    className=\"w-full p-6 text-left focus:outline-none focus:ring-2 focus:ring-crypto-primary focus:ring-offset-2 rounded-xl\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"p-2 rounded-lg bg-muted/50\">\n                          {item.icon}\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-1\">\n                            {item.question}\n                          </h3>\n                          <span className=\"text-xs text-crypto-primary font-medium px-2 py-1 bg-crypto-primary/10 rounded-full\">\n                            {item.category}\n                          </span>\n                        </div>\n                      </div>\n                      <motion.div\n                        animate={{ rotate: openItems.includes(item.id) ? 180 : 0 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n                      </motion.div>\n                    </div>\n                  </button>\n                  \n                  <motion.div\n                    initial={false}\n                    animate={{\n                      height: openItems.includes(item.id) ? \"auto\" : 0,\n                      opacity: openItems.includes(item.id) ? 1 : 0\n                    }}\n                    transition={{ duration: 0.3 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"px-6 pb-6\">\n                      <div className=\"pl-16\">\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {item.answer}\n                        </p>\n                      </div>\n                    </div>\n                  </motion.div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Contact Section */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.8 }}\n          className=\"mt-16 text-center\"\n        >\n          <Card className=\"glass-card border-border/20 bg-gradient-to-r from-crypto-primary/10 to-crypto-success/10 backdrop-blur-xl\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n                Still have questions?\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                This platform is designed for educational purposes to help you learn cryptocurrency trading.\n              </p>\n              <div className=\"flex justify-center space-x-4\">\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <Shield className=\"w-4 h-4 text-crypto-success\" />\n                  <span>100% Safe & Educational</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <TrendingUp className=\"w-4 h-4 text-crypto-primary\" />\n                  <span>Real Market Data</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <Wallet className=\"w-4 h-4 text-crypto-warning\" />\n                  <span>Virtual Funds Only</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":10311},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ChartLine, Shield, Zap, TrendingUp } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Enhanced floating particle background\nfunction ParticleBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const particles: Array<{\n      x: number;\n      y: number;\n      vx: number;\n      vy: number;\n      size: number;\n      opacity: number;\n      color: string;\n      pulse: number;\n    }> = [];\n\n    // Create enhanced particles with different colors and behaviors\n    for (let i = 0; i < 120; i++) {\n      const colors = ['rgba(0, 255, 136, ', 'rgba(100, 255, 218, ', 'rgba(138, 43, 226, ', 'rgba(255, 255, 255, '];\n      particles.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() - 0.5) * 1.2,\n        vy: (Math.random() - 0.5) * 1.2 - 0.3, // Slightly upward drift\n        size: Math.random() * 3 + 0.5,\n        opacity: Math.random() * 0.6 + 0.2,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        pulse: Math.random() * Math.PI * 2,\n      });\n    }\n\n    function animate() {\n      if (!ctx || !canvas) return;\n      \n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      particles.forEach((particle, index) => {\n        // Update position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.pulse += 0.02;\n\n        // Wrap around screen edges\n        if (particle.x < -10) particle.x = canvas.width + 10;\n        if (particle.x > canvas.width + 10) particle.x = -10;\n        if (particle.y < -10) particle.y = canvas.height + 10;\n        if (particle.y > canvas.height + 10) particle.y = -10;\n\n        // Pulsing effect\n        const pulseSize = particle.size + Math.sin(particle.pulse) * 0.5;\n        const pulseOpacity = particle.opacity + Math.sin(particle.pulse * 1.5) * 0.2;\n\n        // Draw particle with glow\n        ctx.save();\n        ctx.globalAlpha = pulseOpacity;\n        ctx.shadowBlur = 15;\n        ctx.shadowColor = particle.color + '0.8)';\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, pulseSize, 0, Math.PI * 2);\n        ctx.fillStyle = particle.color + pulseOpacity + ')';\n        ctx.fill();\n        ctx.restore();\n      });\n\n      // Draw dynamic connections between nearby particles\n      particles.forEach((particle, i) => {\n        particles.slice(i + 1, i + 6).forEach((otherParticle) => {\n          const dx = particle.x - otherParticle.x;\n          const dy = particle.y - otherParticle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 150) {\n            const opacity = (1 - distance / 150) * 0.15;\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(otherParticle.x, otherParticle.y);\n            ctx.strokeStyle = 'rgba(0, 255, 136, 0.3)';\n            ctx.lineWidth = 0.8;\n            ctx.stroke();\n            ctx.restore();\n          }\n        });\n      });\n\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed inset-0 pointer-events-none\"\n      style={{ zIndex: 0 }}\n    />\n  );\n}\n\n// Animated Line Chart Component\nfunction AnimatedLineChart() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [timeframe, setTimeframe] = useState<'1D' | '1W' | '1M'>('1D');\n  const [animationProgress, setAnimationProgress] = useState(0);\n\n  // Sample data for different timeframes\n  const chartData = {\n    '1D': [\n      { time: '00:00', value: 24000 },\n      { time: '04:00', value: 24200 },\n      { time: '08:00', value: 24500 },\n      { time: '12:00', value: 24800 },\n      { time: '16:00', value: 24600 },\n      { time: '20:00', value: 24891 },\n    ],\n    '1W': [\n      { time: 'Mon', value: 23500 },\n      { time: 'Tue', value: 24100 },\n      { time: 'Wed', value: 24300 },\n      { time: 'Thu', value: 24600 },\n      { time: 'Fri', value: 24800 },\n      { time: 'Sat', value: 24700 },\n      { time: 'Sun', value: 24891 },\n    ],\n    '1M': [\n      { time: 'Week 1', value: 22800 },\n      { time: 'Week 2', value: 23200 },\n      { time: 'Week 3', value: 23800 },\n      { time: 'Week 4', value: 24891 },\n    ],\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = canvas.offsetWidth * 2;\n    canvas.height = canvas.offsetHeight * 2;\n    ctx.scale(2, 2);\n\n    const data = chartData[timeframe];\n    const leftPadding = 80; // Increased left padding for price labels\n    const rightPadding = 20;\n    const topPadding = 20;\n    const bottomPadding = 40;\n    const chartWidth = canvas.offsetWidth - leftPadding - rightPadding;\n    const chartHeight = canvas.offsetHeight - topPadding - bottomPadding;\n\n    // Clear canvas with solid dark background\n    ctx.fillStyle = '#0a0a0a';\n    ctx.fillRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n\n    // Calculate min/max values first\n    const values = data.map(d => d.value);\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valueRange = maxValue - minValue;\n\n    // Draw horizontal grid lines (price levels)\n    ctx.strokeStyle = '#333333';\n    ctx.lineWidth = 0.5;\n    ctx.fillStyle = '#888888';\n    ctx.font = '12px Inter, sans-serif';\n    \n    for (let i = 0; i <= 4; i++) {\n      const y = topPadding + (chartHeight / 4) * i;\n      ctx.beginPath();\n      ctx.moveTo(leftPadding, y);\n      ctx.lineTo(canvas.offsetWidth - rightPadding, y);\n      ctx.stroke();\n      \n      // Add price labels on the far left\n      const priceValue = maxValue - (i * valueRange / 4);\n      ctx.fillText(`$${priceValue.toLocaleString()}`, 8, y + 4);\n    }\n    \n    // Draw vertical grid lines (time)\n    for (let i = 0; i < data.length; i++) {\n      const x = leftPadding + (chartWidth / (data.length - 1)) * i;\n      ctx.beginPath();\n      ctx.moveTo(x, topPadding);\n      ctx.lineTo(x, topPadding + chartHeight);\n      ctx.stroke();\n      \n      // Add time labels\n      ctx.fillText(data[i].time, x - 15, canvas.offsetHeight - 10);\n    }\n\n    // Use solid green color for the line\n    ctx.strokeStyle = '#00ff88';\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n\n    const animatedLength = Math.floor(data.length * animationProgress);\n    const partialProgress = (data.length * animationProgress) % 1;\n\n    // Draw all points up to animated length\n    for (let i = 0; i <= animatedLength && i < data.length; i++) {\n      const x = leftPadding + (chartWidth / (data.length - 1)) * i;\n      const normalizedValue = (data[i].value - minValue) / valueRange;\n      const y = topPadding + chartHeight - (normalizedValue * chartHeight);\n\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n\n    // Draw partial line for smooth animation\n    if (animatedLength < data.length - 1 && partialProgress > 0) {\n      const currentIndex = animatedLength;\n      const nextIndex = currentIndex + 1;\n      \n      const currentX = leftPadding + (chartWidth / (data.length - 1)) * currentIndex;\n      const nextX = leftPadding + (chartWidth / (data.length - 1)) * nextIndex;\n      \n      const currentY = topPadding + chartHeight - ((data[currentIndex].value - minValue) / valueRange * chartHeight);\n      const nextY = topPadding + chartHeight - ((data[nextIndex].value - minValue) / valueRange * chartHeight);\n      \n      const interpolatedX = currentX + (nextX - currentX) * partialProgress;\n      const interpolatedY = currentY + (nextY - currentY) * partialProgress;\n      \n      ctx.lineTo(interpolatedX, interpolatedY);\n    }\n\n    ctx.stroke();\n\n    // Draw glow effect\n    ctx.shadowColor = '#00ff88';\n    ctx.shadowBlur = 15;\n    ctx.stroke();\n    ctx.shadowBlur = 0;\n\n    // Draw points with hover effect\n    for (let i = 0; i <= animatedLength && i < data.length; i++) {\n      const x = leftPadding + (chartWidth / (data.length - 1)) * i;\n      const normalizedValue = (data[i].value - minValue) / valueRange;\n      const y = topPadding + chartHeight - (normalizedValue * chartHeight);\n\n      // Outer glow\n      ctx.save();\n      ctx.fillStyle = '#00ff88';\n      ctx.shadowColor = '#00ff88';\n      ctx.shadowBlur = 10;\n      ctx.beginPath();\n      ctx.arc(x, y, 6, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.restore();\n\n      // Inner point\n      ctx.save();\n      ctx.fillStyle = '#ffffff';\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.restore();\n    }\n\n    // Fill area under the curve\n    if (animatedLength > 0) {\n      const areaGradient = ctx.createLinearGradient(0, topPadding, 0, topPadding + chartHeight);\n      areaGradient.addColorStop(0, 'rgba(0, 255, 136, 0.3)');\n      areaGradient.addColorStop(1, 'rgba(0, 255, 136, 0.05)');\n      \n      ctx.fillStyle = areaGradient;\n      ctx.beginPath();\n      \n      // Start from bottom left\n      const firstX = leftPadding;\n      ctx.moveTo(firstX, topPadding + chartHeight);\n      \n      // Draw to first point\n      const firstY = topPadding + chartHeight - ((data[0].value - minValue) / valueRange * chartHeight);\n      ctx.lineTo(firstX, firstY);\n      \n      // Follow the line\n      for (let i = 1; i <= animatedLength && i < data.length; i++) {\n        const x = leftPadding + (chartWidth / (data.length - 1)) * i;\n        const normalizedValue = (data[i].value - minValue) / valueRange;\n        const y = topPadding + chartHeight - (normalizedValue * chartHeight);\n        ctx.lineTo(x, y);\n      }\n      \n      // Close the path to bottom\n      if (animatedLength > 0) {\n        const lastX = leftPadding + (chartWidth / (data.length - 1)) * Math.min(animatedLength, data.length - 1);\n        ctx.lineTo(lastX, topPadding + chartHeight);\n      }\n      \n      ctx.closePath();\n      ctx.fill();\n    }\n    \n  }, [timeframe, animationProgress]);\n\n  useEffect(() => {\n    setAnimationProgress(0);\n    const startTime = Date.now();\n    const duration = 2000; // 2 seconds\n\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Easing function for smooth animation\n      const easedProgress = progress * progress * (3 - 2 * progress);\n      setAnimationProgress(easedProgress);\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  }, [timeframe]);\n\n  return (\n    <div className=\"bg-black rounded-2xl p-6 border-2 border-purple-500/30 shadow-2xl glass-modern\">\n      {/* Chart Controls */}\n      <div className=\"flex justify-between items-center mb-4\">\n        <div className=\"bg-gradient-to-r from-gray-800/80 to-gray-900/80 border border-green-400/30 rounded-lg p-3 shadow-lg backdrop-blur-sm\">\n          <div className=\"text-2xl font-bold text-white\">$24,891.45</div>\n          <div className=\"text-green-400 flex items-center text-sm\">\n            <TrendingUp className=\"w-4 h-4 mr-1\" />\n            +5.2% Growth\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {(['1D', '1W', '1M'] as const).map((period) => (\n            <button\n              key={period}\n              onClick={() => setTimeframe(period)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 transform hover:scale-105 ${\n                timeframe === period\n                  ? 'bg-green-500 text-black shadow-lg border-2 border-green-400'\n                  : 'bg-gray-800/80 text-gray-300 hover:bg-gray-700/90 border border-gray-600 backdrop-blur-sm'\n              }`}\n            >\n              {period}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Chart Canvas */}\n      <canvas\n        ref={canvasRef}\n        className=\"w-full h-64 rounded-lg border border-gray-700/50\"\n        style={{ display: 'block' }}\n      />\n    </div>\n  );\n}\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\" style={{ background: '#0a0a0a' }}>\n      <ParticleBackground />\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 backdrop-blur-lg border-b border-white/10 animate-fade-in\" style={{ zIndex: 10, backgroundColor: 'rgba(10, 10, 10, 0.9)' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 gradient-animation rounded-lg flex items-center justify-center\">\n                <ChartLine className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-white\">CryptoTracker</span>\n            </div>\n\n            <Button\n              onClick={handleLogin}\n              className=\"bg-white/10 hover:bg-white/20 text-white border border-white/20 shadow-lg hover:shadow-white/25 transition-all duration-300 backdrop-blur-sm\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative\" style={{ zIndex: 2 }}>\n        <div className=\"text-center\">\n          <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight animate-fade-in\">\n            Track, Trade, and\n            <span className=\"text-green-400\">\n              {\" \"}Grow{\" \"}\n            </span>\n            Your Crypto Portfolio\n          </h1>\n          <p className=\"text-xl text-white/80 mb-8 max-w-3xl mx-auto leading-relaxed animate-slide-up animate-delay-200\">\n            A modern cryptocurrency portfolio tracking platform with simulated trading, \n            live price data, and professional-grade analytics. Start your crypto journey today.\n          </p>\n          <div className=\"space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center animate-slide-up animate-delay-400\">\n            <Button\n              size=\"lg\"\n              onClick={handleLogin}\n              className=\"bg-white/20 hover:bg-white/30 text-white border border-white/30 px-8 py-3 text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 backdrop-blur-sm animate-pulse-glow\"\n            >\n              Get Started Free\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"px-8 py-3 text-lg border-white/30 text-white hover:bg-white/10 hover:text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 backdrop-blur-sm\"\n              onClick={() => document.getElementById('features-section')?.scrollIntoView({ behavior: 'smooth' })}\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n\n        {/* Hero Chart Section */}\n        <div className=\"mt-16 relative animate-scale-in animate-delay-600\">\n          <AnimatedLineChart />\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features-section\" className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative\" style={{ zIndex: 2 }}>\n        <div className=\"text-center mb-16 animate-fade-in\">\n          <h2 className=\"text-4xl font-bold text-white mb-4\">\n            Everything you need to master crypto trading\n          </h2>\n          <p className=\"text-lg text-white/80 max-w-2xl mx-auto\">\n            Professional-grade tools and real-time data to help you make informed investment decisions.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {/* Feature 1 */}\n          <div className=\"glass-modern p-8 rounded-2xl hover:scale-105 transition-all duration-500 animate-slide-in-left animate-delay-200 hover:shadow-2xl hover:shadow-green-500/20\">\n            <div className=\"w-16 h-16 bg-green-500/20 rounded-xl flex items-center justify-center mb-6 animate-bounce-subtle\">\n              <ChartLine className=\"w-8 h-8 text-green-400\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-white mb-4\">\n              Live Price Tracking\n            </h3>\n            <p className=\"text-white/80 text-lg leading-relaxed\">\n              Real-time cryptocurrency prices powered by CoinGecko API with 24/7 market data updates and advanced charting.\n            </p>\n          </div>\n\n          {/* Feature 2 */}\n          <div className=\"glass-modern p-8 rounded-2xl hover:scale-105 transition-all duration-500 animate-slide-up animate-delay-300 hover:shadow-2xl hover:shadow-blue-500/20\">\n            <div className=\"w-16 h-16 bg-blue-500/20 rounded-xl flex items-center justify-center mb-6 animate-bounce-subtle animate-delay-100\">\n              <Zap className=\"w-8 h-8 text-blue-400\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-white mb-4\">\n              Simulated Trading\n            </h3>\n            <p className=\"text-white/80 text-lg leading-relaxed\">\n              Practice trading with virtual funds. Perfect for learning strategies without financial risk or market pressure.\n            </p>\n          </div>\n\n          {/* Feature 3 */}\n          <div className=\"glass-modern p-8 rounded-2xl hover:scale-105 transition-all duration-500 animate-slide-in-right animate-delay-400 hover:shadow-2xl hover:shadow-purple-500/20\">\n            <div className=\"w-16 h-16 bg-purple-500/20 rounded-xl flex items-center justify-center mb-6 animate-bounce-subtle animate-delay-200\">\n              <Shield className=\"w-8 h-8 text-purple-400\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-white mb-4\">\n              Portfolio Analytics\n            </h3>\n            <p className=\"text-white/80 text-lg leading-relaxed\">\n              Comprehensive portfolio analysis with performance metrics, distribution charts, and advanced insights.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative\" style={{ zIndex: 2 }}>\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-white mb-4 animate-fade-in\">\n            Trusted by crypto enthusiasts worldwide\n          </h2>\n          <p className=\"text-lg text-white/80 max-w-2xl mx-auto animate-slide-up animate-delay-200\">\n            Join our growing community of traders and investors\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div className=\"text-center animate-scale-in animate-delay-200\">\n            <div className=\"text-5xl font-bold text-green-400 mb-2\">50K+</div>\n            <div className=\"text-white/80 text-lg\">Active Users</div>\n          </div>\n          <div className=\"text-center animate-scale-in animate-delay-400\">\n            <div className=\"text-5xl font-bold text-blue-400 mb-2\">$2M+</div>\n            <div className=\"text-white/80 text-lg\">Virtual Trades</div>\n          </div>\n          <div className=\"text-center animate-scale-in animate-delay-600\">\n            <div className=\"text-5xl font-bold text-purple-400 mb-2\">99.9%</div>\n            <div className=\"text-white/80 text-lg\">Uptime</div>\n          </div>\n        </div>\n      </section>\n\n      {/* How it Works Section */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative\" style={{ zIndex: 2 }}>\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-white mb-4 animate-fade-in\">\n            How it works\n          </h2>\n          <p className=\"text-lg text-white/80 max-w-2xl mx-auto animate-slide-up animate-delay-200\">\n            Get started in minutes with our simple three-step process\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12\">\n          <div className=\"text-center animate-slide-in-left animate-delay-200\">\n            <div className=\"w-20 h-20 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-6 text-2xl font-bold text-green-400 border-2 border-green-400/30\">\n              1\n            </div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Sign Up</h3>\n            <p className=\"text-white/80\">Create your free account and get $10,000 in virtual trading funds</p>\n          </div>\n          \n          <div className=\"text-center animate-slide-up animate-delay-400\">\n            <div className=\"w-20 h-20 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-6 text-2xl font-bold text-blue-400 border-2 border-blue-400/30\">\n              2\n            </div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Track & Analyze</h3>\n            <p className=\"text-white/80\">Monitor real-time prices and analyze market trends with our advanced tools</p>\n          </div>\n          \n          <div className=\"text-center animate-slide-in-right animate-delay-600\">\n            <div className=\"w-20 h-20 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-6 text-2xl font-bold text-purple-400 border-2 border-purple-400/30\">\n              3\n            </div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Trade & Learn</h3>\n            <p className=\"text-white/80\">Practice trading strategies and build your portfolio with confidence</p>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"backdrop-blur-sm relative animate-fade-in border-t-2 border-green-500/30\" style={{ zIndex: 2, backgroundColor: 'rgba(50, 50, 50, 0.9)' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h2 className=\"text-4xl font-bold text-white mb-6 animate-slide-up\">\n              Ready to start your crypto journey?\n            </h2>\n            <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto animate-slide-up animate-delay-200\">\n              Join thousands of users who trust CryptoTracker for their portfolio management needs.\n            </p>\n            <Button\n              size=\"lg\"\n              onClick={handleLogin}\n              className=\"bg-green-500 hover:bg-green-400 text-black px-12 py-4 text-xl font-bold backdrop-blur-sm animate-delay-400 transition-all duration-300 transform hover:scale-110 shadow-2xl shadow-green-500/30 hover:shadow-green-400/40\"\n            >\n              Get Started Now - Free\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Modern Footer */}\n      <footer className=\"relative border-t border-white/10\" style={{ zIndex: 2, backgroundColor: '#050505' }}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {/* Brand Section */}\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-xl flex items-center justify-center\">\n                  <ChartLine className=\"w-6 h-6 text-black\" />\n                </div>\n                <span className=\"text-2xl font-bold text-white\">CryptoTracker</span>\n              </div>\n              <p className=\"text-white/70 text-lg leading-relaxed max-w-md\">\n                The ultimate cryptocurrency portfolio tracking and trading platform.\n                Start your journey to financial freedom with simulated trading and real-time analytics.\n              </p>\n              <div className=\"flex space-x-4 mt-6\">\n                <div className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer\">\n                  <span className=\"text-white\">𝕏</span>\n                </div>\n                <div className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer\">\n                  <span className=\"text-white\">▶</span>\n                </div>\n                <div className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer\">\n                  <span className=\"text-white\">in</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Product */}\n            <div>\n              <h3 className=\"text-white font-semibold text-lg mb-4\">Product</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Features</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Pricing</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">API</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Mobile App</a></li>\n              </ul>\n            </div>\n\n            {/* Company */}\n            <div>\n              <h3 className=\"text-white font-semibold text-lg mb-4\">Company</h3>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">About</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Blog</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Careers</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Bottom Section */}\n          <div className=\"border-t border-white/10 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-white/60 text-sm\">\n              © 2025 CryptoTracker. All rights reserved. Built with ❤️ for crypto enthusiasts.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-white/60 hover:text-white text-sm transition-colors\">Privacy Policy</a>\n              <a href=\"#\" className=\"text-white/60 hover:text-white text-sm transition-colors\">Terms of Service</a>\n              <a href=\"#\" className=\"text-white/60 hover:text-white text-sm transition-colors\">Cookie Policy</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":27199},"client/src/pages/Portfolio.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePortfolio, useUserBalance } from \"@/hooks/usePortfolio\";\nimport { useCryptoPrices } from \"@/hooks/useCryptoPrices\";\nimport Header from \"@/components/Header\";\nimport PortfolioDistribution from \"@/components/PortfolioDistribution\";\nimport RecentTransactions from \"@/components/RecentTransactions\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { TrendingUp, TrendingDown, ArrowUp, ArrowDown, DollarSign, Wallet, Search } from \"lucide-react\";\n\nexport default function Portfolio() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { data: holdings, isLoading: holdingsLoading } = usePortfolio();\n  const { data: userBalance } = useUserBalance();\n  const { data: cryptoPrices } = useCryptoPrices();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  if (isLoading || holdingsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-48\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 h-96 bg-muted rounded-2xl\"></div>\n              <div className=\"h-96 bg-muted rounded-2xl\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Authentication handled by router\n  }\n\n  const getCryptoName = (symbol: string) => {\n    const nameMap: { [key: string]: string } = {\n      'BTC': 'Bitcoin',\n      'ETH': 'Ethereum',\n      'ADA': 'Cardano',\n      'SOL': 'Solana',\n      'MATIC': 'Polygon',\n      'LINK': 'Chainlink',\n      'AVAX': 'Avalanche',\n      'BNB': 'BNB',\n      'XRP': 'XRP',\n      'DOGE': 'Dogecoin',\n      'DOT': 'Polkadot',\n      'SHIB': 'Shiba Inu',\n      'UNI': 'Uniswap',\n      'LTC': 'Litecoin',\n      'ATOM': 'Cosmos',\n      'ALGO': 'Algorand',\n      'NEAR': 'NEAR Protocol',\n      'VET': 'VeChain',\n      'FIL': 'Filecoin',\n      'TRX': 'TRON'\n    };\n    return nameMap[symbol] || symbol;\n  };\n\n  // Calculate portfolio data with current prices\n  const portfolioData = holdings ? holdings.map(holding => {\n    const cryptoPrice = cryptoPrices?.find(p => p.symbol === holding.symbol);\n    const currentPrice = cryptoPrice?.price || 0;\n    const amount = parseFloat(holding.amount);\n    const value = amount * currentPrice;\n    \n    return {\n      ...holding,\n      name: getCryptoName(holding.symbol),\n      currentPrice,\n      value,\n      change24h: cryptoPrice?.change24h || 0,\n    };\n  }) : [];\n\n  const totalValue = portfolioData.reduce((sum, holding) => sum + holding.value, 0);\n  const availableCash = userBalance ? parseFloat(userBalance.balance) : 0;\n\n  const filteredHoldings = portfolioData.filter(holding =>\n    holding.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    holding.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <h1 className=\"text-3xl font-bold mb-2\">Portfolio</h1>\n          <p className=\"text-muted-foreground\">Track your crypto investments and performance</p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-primary/5 via-background to-background\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Portfolio Value</p>\n                  <p className=\"text-2xl font-bold\">${totalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Wallet className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Available Cash</p>\n                  <p className=\"text-2xl font-bold\">${availableCash.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                  <DollarSign className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Assets</p>\n                  <p className=\"text-2xl font-bold\">${(totalValue + availableCash).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>\n                </div>\n                <div className=\"h-12 w-12 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 space-y-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold\">Your Holdings</h2>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search assets...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-64\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {filteredHoldings.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-muted-foreground\">No holdings found.</p>\n                      </div>\n                    ) : (\n                      filteredHoldings.map((holding) => (\n                        <div\n                          key={holding.id}\n                          className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted/50 transition-colors\"\n                        >\n                          <div className=\"flex items-center space-x-4\">\n                            <CryptoIcon symbol={holding.symbol} size={40} />\n                            <div>\n                              <h3 className=\"font-medium\">{holding.name}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{holding.symbol}</p>\n                            </div>\n                          </div>\n\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">{parseFloat(holding.amount).toFixed(6)} {holding.symbol}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              ${holding.currentPrice.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}\n                            </div>\n                          </div>\n\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">${holding.value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>\n                            <div className={`text-sm flex items-center ${holding.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                              {holding.change24h >= 0 ? <ArrowUp className=\"h-3 w-3 mr-1\" /> : <ArrowDown className=\"h-3 w-3 mr-1\" />}\n                              {Math.abs(holding.change24h).toFixed(2)}%\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <RecentTransactions />\n            </motion.div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              <PortfolioDistribution />\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10002},"client/src/pages/Trade.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCryptoPrices, type CryptoPrice } from \"@/hooks/useCryptoPrices\";\nimport { usePortfolio, useUserBalance } from \"@/hooks/usePortfolio\";\nimport Header from \"@/components/Header\";\nimport TradingModal from \"@/components/TradingModal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, TrendingUp, TrendingDown } from \"lucide-react\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\n\nexport default function Trade() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [tradingModalOpen, setTradingModalOpen] = useState(false);\n  const [selectedCrypto, setSelectedCrypto] = useState<CryptoPrice | null>(null);\n  const [tradeType, setTradeType] = useState<\"buy\" | \"sell\">(\"buy\");\n\n  const { data: cryptos, isLoading: cryptosLoading } = useCryptoPrices();\n  const { data: holdings } = usePortfolio();\n  const { data: userBalance } = useUserBalance();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-48\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 h-96 bg-muted rounded-2xl\"></div>\n              <div className=\"h-96 bg-muted rounded-2xl\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Authentication handled by router\n  }\n\n  const handleTrade = (crypto: CryptoPrice, type: \"buy\" | \"sell\") => {\n    setSelectedCrypto(crypto);\n    setTradeType(type);\n    setTradingModalOpen(true);\n  };\n\n  const filteredCryptos = cryptos?.filter(crypto =>\n    crypto.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    crypto.name.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const availableCash = userBalance ? parseFloat(userBalance.balance) : 0;\n\n  // Check if user has holdings for each crypto\n  const cryptosWithHoldings = filteredCryptos.map(crypto => {\n    const holding = holdings?.find(h => h.symbol === crypto.symbol);\n    return {\n      ...crypto,\n      hasHolding: !!holding,\n      holdingAmount: holding ? parseFloat(holding.amount) : 0,\n    };\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <h1 className=\"text-3xl font-bold mb-2\">Trade</h1>\n          <p className=\"text-muted-foreground\">Buy and sell cryptocurrencies</p>\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            Available Balance: <span className=\"font-semibold text-primary\">${availableCash.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold\">Available Cryptocurrencies</h2>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search cryptocurrencies...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-64\"\n                      />\n                    </div>\n                  </div>\n\n                  {cryptosLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4, 5].map((i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-16 bg-muted rounded-lg\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {cryptosWithHoldings.map((crypto) => (\n                        <div\n                          key={crypto.symbol}\n                          className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted/50 transition-colors\"\n                        >\n                          <div className=\"flex items-center space-x-4\">\n                            <CryptoIcon symbol={crypto.symbol} size={40} />\n                            <div>\n                              <h3 className=\"font-medium\">{crypto.name}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{crypto.symbol}</p>\n                              {crypto.hasHolding && (\n                                <p className=\"text-xs text-primary\">\n                                  Holding: {crypto.holdingAmount.toFixed(6)} {crypto.symbol}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"text-right mr-4\">\n                            <div className=\"font-medium\">\n                              ${crypto.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}\n                            </div>\n                            <div className={`text-sm flex items-center justify-end ${crypto.change24h >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                              {crypto.change24h >= 0 ? <TrendingUp className=\"h-3 w-3 mr-1\" /> : <TrendingDown className=\"h-3 w-3 mr-1\" />}\n                              {Math.abs(crypto.change24h).toFixed(2)}%\n                            </div>\n                          </div>\n\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleTrade(crypto, \"buy\")}\n                              className=\"bg-green-600 hover:bg-green-700 text-white\"\n                            >\n                              Buy\n                            </Button>\n                            {crypto.hasHolding && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleTrade(crypto, \"sell\")}\n                                className=\"border-red-600 text-red-600 hover:bg-red-600 hover:text-white\"\n                              >\n                                Sell\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Trading Tips</h3>\n                  <div className=\"space-y-3 text-sm text-muted-foreground\">\n                    <p>• Always do your own research before investing</p>\n                    <p>• Start with small amounts to learn</p>\n                    <p>• Diversify your portfolio</p>\n                    <p>• Keep track of your transactions</p>\n                    <p>• Set stop-loss orders to manage risk</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n\n      <TradingModal\n        isOpen={tradingModalOpen}\n        onClose={() => setTradingModalOpen(false)}\n        crypto={selectedCrypto}\n        tradeType={tradeType}\n      />\n    </div>\n  );\n}","size_bytes":8845},"client/src/pages/WatchlistPage.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWatchlist, useWatchlistMutation } from \"@/hooks/usePortfolio\";\nimport { useCryptoPrices } from \"@/hooks/useCryptoPrices\";\nimport Header from \"@/components/Header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, X, Search, ArrowUp, ArrowDown, Star } from \"lucide-react\";\nimport CryptoIcon from \"@/components/CryptoIcon\";\n\nexport default function WatchlistPage() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { data: watchlist, isLoading: watchlistLoading } = useWatchlist();\n  const { data: cryptoPrices } = useCryptoPrices();\n  const watchlistMutation = useWatchlistMutation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-48\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 h-96 bg-muted rounded-2xl\"></div>\n              <div className=\"h-96 bg-muted rounded-2xl\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: value < 1 ? 6 : 2,\n    }).format(value);\n  };\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return \"text-green-400\";\n    if (change < 0) return \"text-red-400\";\n    return \"text-gray-400\";\n  };\n\n  const watchlistWithPrices = watchlist?.map(item => {\n    const cryptoPrice = cryptoPrices?.find(p => p.symbol === item.symbol);\n    return {\n      ...item,\n      price: cryptoPrice?.price || 0,\n      change24h: cryptoPrice?.change24h || 0,\n      name: cryptoPrice?.name || item.symbol,\n    };\n  }) || [];\n\n  const filteredWatchlist = watchlistWithPrices.filter(item =>\n    item.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const availableCryptos = cryptoPrices?.filter(crypto => \n    !watchlist?.some(item => item.symbol === crypto.symbol)\n  ) || [];\n\n  const filteredAvailable = availableCryptos.filter(crypto =>\n    crypto.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    crypto.name.toLowerCase().includes(searchTerm.toLowerCase())\n  ).slice(0, 10);\n\n  const handleAddToWatchlist = (symbol: string) => {\n    watchlistMutation.mutate({ action: \"add\", symbol });\n  };\n\n  const handleRemoveFromWatchlist = (symbol: string) => {\n    watchlistMutation.mutate({ action: \"remove\", symbol });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <h1 className=\"text-3xl font-bold mb-2\">Watchlist</h1>\n          <p className=\"text-muted-foreground\">Keep track of your favorite cryptocurrencies</p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-xl font-semibold\">Your Watchlist</h2>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search watchlist...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                </div>\n\n                {watchlistLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-16 bg-muted rounded-lg\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : filteredWatchlist.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Star className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No cryptocurrencies in your watchlist</p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Add some from the available list</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredWatchlist.map((item) => (\n                      <div\n                        key={item.id}\n                        className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <CryptoIcon symbol={item.symbol} size={40} />\n                          <div>\n                            <h3 className=\"font-medium\">{item.name}</h3>\n                            <p className=\"text-sm text-muted-foreground\">{item.symbol}</p>\n                          </div>\n                        </div>\n\n                        <div className=\"text-right mr-4\">\n                          <div className=\"font-medium\">{formatCurrency(item.price)}</div>\n                          <div className={`text-sm flex items-center justify-end ${getChangeColor(item.change24h)}`}>\n                            {item.change24h >= 0 ? <ArrowUp className=\"h-3 w-3 mr-1\" /> : <ArrowDown className=\"h-3 w-3 mr-1\" />}\n                            {Math.abs(item.change24h).toFixed(2)}%\n                          </div>\n                        </div>\n\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          onClick={() => handleRemoveFromWatchlist(item.symbol)}\n                          disabled={watchlistMutation.isPending}\n                          className=\"text-red-600 hover:bg-red-600 hover:text-white border-red-600\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-xl font-semibold mb-6\">Add to Watchlist</h2>\n                \n                <div className=\"space-y-4\">\n                  {filteredAvailable.map((crypto) => (\n                    <div\n                      key={crypto.symbol}\n                      className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted/50 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <CryptoIcon symbol={crypto.symbol} size={40} />\n                        <div>\n                          <h3 className=\"font-medium\">{crypto.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{crypto.symbol}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"text-right mr-4\">\n                        <div className=\"font-medium\">{formatCurrency(crypto.price)}</div>\n                        <div className={`text-sm flex items-center justify-end ${getChangeColor(crypto.change24h)}`}>\n                          {crypto.change24h >= 0 ? <ArrowUp className=\"h-3 w-3 mr-1\" /> : <ArrowDown className=\"h-3 w-3 mr-1\" />}\n                          {Math.abs(crypto.change24h).toFixed(2)}%\n                        </div>\n                      </div>\n\n                      <Button\n                        size=\"icon\"\n                        onClick={() => handleAddToWatchlist(crypto.symbol)}\n                        disabled={watchlistMutation.isPending}\n                        className=\"bg-primary hover:bg-primary/90\"\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9320},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}